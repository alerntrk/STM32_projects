
ADC_WITH_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000326c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  080033b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080033b4  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af35  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0f  00000000  00000000  0002af69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002d260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001386d  00000000  00000000  0002daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b13a  00000000  00000000  0004130d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078edf  00000000  00000000  0004c447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c5326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f14  00000000  00000000  000c537c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003314 	.word	0x08003314

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003314 	.word	0x08003314

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <Read_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Read_ADC()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc);
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <Read_ADC+0x40>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 fcdc 	bl	8000e60 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc, 100000) == HAL_OK)
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <Read_ADC+0x44>)
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <Read_ADC+0x40>)
 80004ac:	0011      	movs	r1, r2
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 fd6a 	bl	8000f88 <HAL_ADC_PollForConversion>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d107      	bne.n	80004c8 <Read_ADC+0x2c>
		adc_value = HAL_ADC_GetValue(&hadc);
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <Read_ADC+0x40>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fe00 	bl	80010c0 <HAL_ADC_GetValue>
 80004c0:	0003      	movs	r3, r0
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <Read_ADC+0x48>)
 80004c6:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop(&hadc);
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <Read_ADC+0x40>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fd1c 	bl	8000f08 <HAL_ADC_Stop>

	return adc_value;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <Read_ADC+0x48>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	200000c0 	.word	0x200000c0
 80004e0:	000186a0 	.word	0x000186a0
 80004e4:	20000028 	.word	0x20000028

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fad4 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f820 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f94e 	bl	8000794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 f91c 	bl	8000734 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80004fc:	f000 f886 	bl	800060c <MX_ADC_Init>
  MX_DAC_Init();
 8000500:	f000 f8ea 	bl	80006d8 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <main+0x44>)
 8000506:	2100      	movs	r1, #0
 8000508:	0018      	movs	r0, r3
 800050a:	f001 f8e5 	bl	80016d8 <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  dac_value = Read_ADC();
 800050e:	f7ff ffc5 	bl	800049c <Read_ADC>
 8000512:	0003      	movs	r3, r0
 8000514:	001a      	movs	r2, r3
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <main+0x48>)
 8000518:	801a      	strh	r2, [r3, #0]
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <main+0x48>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	4803      	ldr	r0, [pc, #12]	; (800052c <main+0x44>)
 8000520:	2200      	movs	r2, #0
 8000522:	2100      	movs	r1, #0
 8000524:	f001 f91c 	bl	8001760 <HAL_DAC_SetValue>
	  dac_value = Read_ADC();
 8000528:	e7f1      	b.n	800050e <main+0x26>
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	2000002c 	.word	0x2000002c
 8000530:	2000011c 	.word	0x2000011c

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b09d      	sub	sp, #116	; 0x74
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	2438      	movs	r4, #56	; 0x38
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2338      	movs	r3, #56	; 0x38
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f002 fedd 	bl	8003304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054a:	2324      	movs	r3, #36	; 0x24
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	0018      	movs	r0, r3
 8000550:	2314      	movs	r3, #20
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f002 fed5 	bl	8003304 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055a:	003b      	movs	r3, r7
 800055c:	0018      	movs	r0, r3
 800055e:	2324      	movs	r3, #36	; 0x24
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f002 fece 	bl	8003304 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a26      	ldr	r2, [pc, #152]	; (8000608 <SystemClock_Config+0xd4>)
 800056e:	401a      	ands	r2, r3
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <SystemClock_Config+0xd0>)
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0109      	lsls	r1, r1, #4
 8000576:	430a      	orrs	r2, r1
 8000578:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2210      	movs	r2, #16
 8000580:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2201      	movs	r2, #1
 8000586:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	22a0      	movs	r2, #160	; 0xa0
 8000592:	0212      	lsls	r2, r2, #8
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	187b      	adds	r3, r7, r1
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 fa8c 	bl	8001abc <HAL_RCC_OscConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005a8:	f000 f958 	bl	800085c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	2124      	movs	r1, #36	; 0x24
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	220f      	movs	r2, #15
 80005b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2100      	movs	r1, #0
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 fe37 	bl	8002244 <HAL_RCC_ClockConfig>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005da:	f000 f93f 	bl	800085c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005de:	003b      	movs	r3, r7
 80005e0:	2202      	movs	r2, #2
 80005e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e4:	003b      	movs	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ea:	003b      	movs	r3, r7
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 f84d 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005f6:	f000 f931 	bl	800085c <Error_Handler>
  }
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b01d      	add	sp, #116	; 0x74
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40007000 	.word	0x40007000
 8000608:	ffffe7ff 	.word	0xffffe7ff

0800060c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	003b      	movs	r3, r7
 8000614:	0018      	movs	r0, r3
 8000616:	2308      	movs	r3, #8
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f002 fe72 	bl	8003304 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000620:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <MX_ADC_Init+0xc0>)
 8000622:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <MX_ADC_Init+0xc4>)
 8000624:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_ADC_Init+0xc0>)
 8000628:	2200      	movs	r2, #0
 800062a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <MX_ADC_Init+0xc0>)
 800062e:	22c0      	movs	r2, #192	; 0xc0
 8000630:	0612      	lsls	r2, r2, #24
 8000632:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_ADC_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <MX_ADC_Init+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_ADC_Init+0xc0>)
 8000642:	2201      	movs	r2, #1
 8000644:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_ADC_Init+0xc0>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_ADC_Init+0xc0>)
 800064e:	2220      	movs	r2, #32
 8000650:	2100      	movs	r1, #0
 8000652:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC_Init+0xc0>)
 8000656:	2221      	movs	r2, #33	; 0x21
 8000658:	2100      	movs	r1, #0
 800065a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_ADC_Init+0xc0>)
 8000664:	22c2      	movs	r2, #194	; 0xc2
 8000666:	32ff      	adds	r2, #255	; 0xff
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_ADC_Init+0xc0>)
 800066c:	222c      	movs	r2, #44	; 0x2c
 800066e:	2100      	movs	r1, #0
 8000670:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_ADC_Init+0xc0>)
 8000674:	2204      	movs	r2, #4
 8000676:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_ADC_Init+0xc0>)
 800067a:	2200      	movs	r2, #0
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_ADC_Init+0xc0>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_ADC_Init+0xc0>)
 8000686:	2201      	movs	r2, #1
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_ADC_Init+0xc0>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_ADC_Init+0xc0>)
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fa70 	bl	8000b78 <HAL_ADC_Init>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800069c:	f000 f8de 	bl	800085c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006a0:	003b      	movs	r3, r7
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_ADC_Init+0xc8>)
 80006a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006a6:	003b      	movs	r3, r7
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0152      	lsls	r2, r2, #5
 80006ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ae:	003a      	movs	r2, r7
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_ADC_Init+0xc0>)
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fd0f 	bl	80010d8 <HAL_ADC_ConfigChannel>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006be:	f000 f8cd 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	200000c0 	.word	0x200000c0
 80006d0:	40012400 	.word	0x40012400
 80006d4:	28000400 	.word	0x28000400

080006d8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006de:	003b      	movs	r3, r7
 80006e0:	0018      	movs	r0, r3
 80006e2:	2308      	movs	r3, #8
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f002 fe0c 	bl	8003304 <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_DAC_Init+0x54>)
 80006ee:	4a10      	ldr	r2, [pc, #64]	; (8000730 <MX_DAC_Init+0x58>)
 80006f0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_DAC_Init+0x54>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 ff7f 	bl	80015f8 <HAL_DAC_Init>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 80006fe:	f000 f8ad 	bl	800085c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000702:	003b      	movs	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000708:	003b      	movs	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800070e:	0039      	movs	r1, r7
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_DAC_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	0018      	movs	r0, r3
 8000716:	f000 ff93 	bl	8001640 <HAL_DAC_ConfigChannel>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 800071e:	f000 f89d 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	2000002c 	.word	0x2000002c
 8000730:	40007400 	.word	0x40007400

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART2_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_USART2_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000740:	22e1      	movs	r2, #225	; 0xe1
 8000742:	0252      	lsls	r2, r2, #9
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART2_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000778:	0018      	movs	r0, r3
 800077a:	f002 f8eb 	bl	8002954 <HAL_UART_Init>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f86b 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000003c 	.word	0x2000003c
 8000790:	40004400 	.word	0x40004400

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	240c      	movs	r4, #12
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f002 fdad 	bl	8003304 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007b0:	2104      	movs	r1, #4
 80007b2:	430a      	orrs	r2, r1
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ba:	2204      	movs	r2, #4
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	430a      	orrs	r2, r1
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_GPIO_Init+0xc0>)
 80007e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ea:	2201      	movs	r2, #1
 80007ec:	4013      	ands	r3, r2
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f2:	23a0      	movs	r3, #160	; 0xa0
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 f940 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	0192      	lsls	r2, r2, #6
 8000806:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2284      	movs	r2, #132	; 0x84
 800080c:	0392      	lsls	r2, r2, #14
 800080e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	193b      	adds	r3, r7, r4
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <MX_GPIO_Init+0xc4>)
 800081a:	0019      	movs	r1, r3
 800081c:	0010      	movs	r0, r2
 800081e:	f000 ffb9 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000822:	0021      	movs	r1, r4
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2220      	movs	r2, #32
 8000828:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083c:	187a      	adds	r2, r7, r1
 800083e:	23a0      	movs	r3, #160	; 0xa0
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 ffa5 	bl	8001794 <HAL_GPIO_Init>

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b009      	add	sp, #36	; 0x24
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021000 	.word	0x40021000
 8000858:	50000800 	.word	0x50000800

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <HAL_MspInit+0x24>)
 800086e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x24>)
 8000872:	2101      	movs	r1, #1
 8000874:	430a      	orrs	r2, r1
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <HAL_MspInit+0x24>)
 800087a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_MspInit+0x24>)
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	0549      	lsls	r1, r1, #21
 8000882:	430a      	orrs	r2, r1
 8000884:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	240c      	movs	r4, #12
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	2314      	movs	r3, #20
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f002 fd2e 	bl	8003304 <memset>
  if(hadc->Instance==ADC1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_ADC_MspInit+0x70>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d121      	bne.n	80008f6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0089      	lsls	r1, r1, #2
 80008bc:	430a      	orrs	r2, r1
 80008be:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008c6:	2104      	movs	r1, #4
 80008c8:	430a      	orrs	r2, r1
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	2204      	movs	r2, #4
 80008d2:	4013      	ands	r3, r2
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2203      	movs	r2, #3
 80008e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_ADC_MspInit+0x78>)
 80008ee:	0019      	movs	r1, r3
 80008f0:	0010      	movs	r0, r2
 80008f2:	f000 ff4f 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b009      	add	sp, #36	; 0x24
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40012400 	.word	0x40012400
 8000904:	40021000 	.word	0x40021000
 8000908:	50000800 	.word	0x50000800

0800090c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	240c      	movs	r4, #12
 8000916:	193b      	adds	r3, r7, r4
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 fcf0 	bl	8003304 <memset>
  if(hdac->Instance==DAC)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <HAL_DAC_MspInit+0x70>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d122      	bne.n	8000974 <HAL_DAC_MspInit+0x68>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_DAC_MspInit+0x74>)
 8000930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <HAL_DAC_MspInit+0x74>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	0589      	lsls	r1, r1, #22
 8000938:	430a      	orrs	r2, r1
 800093a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_DAC_MspInit+0x74>)
 800093e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_DAC_MspInit+0x74>)
 8000942:	2101      	movs	r1, #1
 8000944:	430a      	orrs	r2, r1
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_DAC_MspInit+0x74>)
 800094a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094c:	2201      	movs	r2, #1
 800094e:	4013      	ands	r3, r2
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2210      	movs	r2, #16
 8000958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2203      	movs	r2, #3
 800095e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	193a      	adds	r2, r7, r4
 8000968:	23a0      	movs	r3, #160	; 0xa0
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f000 ff10 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b009      	add	sp, #36	; 0x24
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	40007400 	.word	0x40007400
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	240c      	movs	r4, #12
 800098e:	193b      	adds	r3, r7, r4
 8000990:	0018      	movs	r0, r3
 8000992:	2314      	movs	r3, #20
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f002 fcb4 	bl	8003304 <memset>
  if(huart->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a18      	ldr	r2, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x80>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d129      	bne.n	80009fa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x84>)
 80009a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x84>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0289      	lsls	r1, r1, #10
 80009b0:	430a      	orrs	r2, r1
 80009b2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_UART_MspInit+0x84>)
 80009b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <HAL_UART_MspInit+0x84>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	430a      	orrs	r2, r1
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_UART_MspInit+0x84>)
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	2201      	movs	r2, #1
 80009c6:	4013      	ands	r3, r2
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009cc:	0021      	movs	r1, r4
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	220c      	movs	r2, #12
 80009d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2202      	movs	r2, #2
 80009d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2203      	movs	r2, #3
 80009e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2204      	movs	r2, #4
 80009ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	187a      	adds	r2, r7, r1
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fecd 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b009      	add	sp, #36	; 0x24
 8000a00:	bd90      	pop	{r4, r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40021000 	.word	0x40021000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f886 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a6e:	f7ff ffe4 	bl	8000a3a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f002 fc23 	bl	80032bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd37 	bl	80004e8 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   r0, =_estack
 8000a7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a88:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 8000a8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a90:	20000124 	.word	0x20000124

08000a94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_COMP_IRQHandler>
	...

08000a98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_Init+0x3c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_Init+0x3c>)
 8000aaa:	2140      	movs	r1, #64	; 0x40
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 f811 	bl	8000ad8 <HAL_InitTick>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e001      	b.n	8000ac6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac2:	f7ff fed1 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
}
 8000aca:	0018      	movs	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_InitTick+0x5c>)
 8000ae2:	681c      	ldr	r4, [r3, #0]
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_InitTick+0x60>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	0019      	movs	r1, r3
 8000aea:	23fa      	movs	r3, #250	; 0xfa
 8000aec:	0098      	lsls	r0, r3, #2
 8000aee:	f7ff fb0b 	bl	8000108 <__udivsi3>
 8000af2:	0003      	movs	r3, r0
 8000af4:	0019      	movs	r1, r3
 8000af6:	0020      	movs	r0, r4
 8000af8:	f7ff fb06 	bl	8000108 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fd6d 	bl	80015de <HAL_SYSTICK_Config>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00f      	b.n	8000b2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d80b      	bhi.n	8000b2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2301      	movs	r3, #1
 8000b16:	425b      	negs	r3, r3
 8000b18:	2200      	movs	r2, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fd4a 	bl	80015b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_InitTick+0x64>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b003      	add	sp, #12
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	001a      	movs	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	18d2      	adds	r2, r2, r3
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000120 	.word	0x20000120

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000120 	.word	0x20000120

08000b78 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e159      	b.n	8000e3e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10a      	bne.n	8000ba8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2250      	movs	r2, #80	; 0x50
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fe74 	bl	8000890 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bac:	2210      	movs	r2, #16
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b10      	cmp	r3, #16
 8000bb2:	d005      	beq.n	8000bc0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000bbe:	d00b      	beq.n	8000bd8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2250      	movs	r2, #80	; 0x50
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e132      	b.n	8000e3e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bdc:	4a9a      	ldr	r2, [pc, #616]	; (8000e48 <HAL_ADC_Init+0x2d0>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	2202      	movs	r2, #2
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2203      	movs	r2, #3
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <HAL_ADC_Init+0x90>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d101      	bne.n	8000c08 <HAL_ADC_Init+0x90>
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <HAL_ADC_Init+0x92>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d149      	bne.n	8000ca2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	23c0      	movs	r3, #192	; 0xc0
 8000c14:	061b      	lsls	r3, r3, #24
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d00b      	beq.n	8000c32 <HAL_ADC_Init+0xba>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d005      	beq.n	8000c32 <HAL_ADC_Init+0xba>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	061b      	lsls	r3, r3, #24
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d111      	bne.n	8000c56 <HAL_ADC_Init+0xde>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	691a      	ldr	r2, [r3, #16]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	0892      	lsrs	r2, r2, #2
 8000c40:	611a      	str	r2, [r3, #16]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6919      	ldr	r1, [r3, #16]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	430a      	orrs	r2, r1
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	e014      	b.n	8000c80 <HAL_ADC_Init+0x108>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	691a      	ldr	r2, [r3, #16]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	0892      	lsrs	r2, r2, #2
 8000c64:	611a      	str	r2, [r3, #16]
 8000c66:	4b79      	ldr	r3, [pc, #484]	; (8000e4c <HAL_ADC_Init+0x2d4>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b78      	ldr	r3, [pc, #480]	; (8000e4c <HAL_ADC_Init+0x2d4>)
 8000c6c:	4978      	ldr	r1, [pc, #480]	; (8000e50 <HAL_ADC_Init+0x2d8>)
 8000c6e:	400a      	ands	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	4b76      	ldr	r3, [pc, #472]	; (8000e4c <HAL_ADC_Init+0x2d4>)
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	4b74      	ldr	r3, [pc, #464]	; (8000e4c <HAL_ADC_Init+0x2d4>)
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2118      	movs	r1, #24
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68d9      	ldr	r1, [r3, #12]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000ca2:	4b6a      	ldr	r3, [pc, #424]	; (8000e4c <HAL_ADC_Init+0x2d4>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b69      	ldr	r3, [pc, #420]	; (8000e4c <HAL_ADC_Init+0x2d4>)
 8000ca8:	496a      	ldr	r1, [pc, #424]	; (8000e54 <HAL_ADC_Init+0x2dc>)
 8000caa:	400a      	ands	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000cae:	4b67      	ldr	r3, [pc, #412]	; (8000e4c <HAL_ADC_Init+0x2d4>)
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb6:	065a      	lsls	r2, r3, #25
 8000cb8:	4b64      	ldr	r3, [pc, #400]	; (8000e4c <HAL_ADC_Init+0x2d4>)
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	055b      	lsls	r3, r3, #21
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d108      	bne.n	8000cde <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	0549      	lsls	r1, r1, #21
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	495b      	ldr	r1, [pc, #364]	; (8000e58 <HAL_ADC_Init+0x2e0>)
 8000cea:	400a      	ands	r2, r1
 8000cec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68d9      	ldr	r1, [r3, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d101      	bne.n	8000d04 <HAL_ADC_Init+0x18c>
 8000d00:	2304      	movs	r3, #4
 8000d02:	e000      	b.n	8000d06 <HAL_ADC_Init+0x18e>
 8000d04:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d06:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2020      	movs	r0, #32
 8000d0c:	5c1b      	ldrb	r3, [r3, r0]
 8000d0e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d10:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	202c      	movs	r0, #44	; 0x2c
 8000d16:	5c1b      	ldrb	r3, [r3, r0]
 8000d18:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d1a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d20:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000d28:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000d30:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	430a      	orrs	r2, r1
 8000d38:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d3e:	23c2      	movs	r3, #194	; 0xc2
 8000d40:	33ff      	adds	r3, #255	; 0xff
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d00b      	beq.n	8000d5e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68d9      	ldr	r1, [r3, #12]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2221      	movs	r2, #33	; 0x21
 8000d62:	5c9b      	ldrb	r3, [r3, r2]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d11a      	bne.n	8000d9e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2220      	movs	r2, #32
 8000d6c:	5c9b      	ldrb	r3, [r3, r2]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d109      	bne.n	8000d86 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	0249      	lsls	r1, r1, #9
 8000d80:	430a      	orrs	r2, r1
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	e00b      	b.n	8000d9e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d96:	2201      	movs	r2, #1
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d11f      	bne.n	8000de6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	492a      	ldr	r1, [pc, #168]	; (8000e5c <HAL_ADC_Init+0x2e4>)
 8000db2:	400a      	ands	r2, r1
 8000db4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6919      	ldr	r1, [r3, #16]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000dc4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000dca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2101      	movs	r1, #1
 8000de0:	430a      	orrs	r2, r1
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	e00e      	b.n	8000e04 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d107      	bne.n	8000e04 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2101      	movs	r1, #1
 8000e00:	438a      	bics	r2, r1
 8000e02:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	695a      	ldr	r2, [r3, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2107      	movs	r1, #7
 8000e10:	438a      	bics	r2, r1
 8000e12:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6959      	ldr	r1, [r3, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e30:	2203      	movs	r2, #3
 8000e32:	4393      	bics	r3, r2
 8000e34:	2201      	movs	r2, #1
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	fffffefd 	.word	0xfffffefd
 8000e4c:	40012708 	.word	0x40012708
 8000e50:	ffc3ffff 	.word	0xffc3ffff
 8000e54:	fdffffff 	.word	0xfdffffff
 8000e58:	fffe0219 	.word	0xfffe0219
 8000e5c:	fffffc03 	.word	0xfffffc03

08000e60 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	230f      	movs	r3, #15
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2204      	movs	r2, #4
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d138      	bne.n	8000eee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2250      	movs	r2, #80	; 0x50
 8000e80:	5c9b      	ldrb	r3, [r3, r2]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <HAL_ADC_Start+0x2a>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e038      	b.n	8000efc <HAL_ADC_Start+0x9c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2250      	movs	r2, #80	; 0x50
 8000e8e:	2101      	movs	r1, #1
 8000e90:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d007      	beq.n	8000eaa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e9a:	230f      	movs	r3, #15
 8000e9c:	18fc      	adds	r4, r7, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 f9b9 	bl	8001218 <ADC_Enable>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d120      	bne.n	8000ef6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <HAL_ADC_Start+0xa4>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	0052      	lsls	r2, r2, #1
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2250      	movs	r2, #80	; 0x50
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	221c      	movs	r2, #28
 8000eda:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	e003      	b.n	8000ef6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	781b      	ldrb	r3, [r3, #0]
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b005      	add	sp, #20
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	fffff0fe 	.word	0xfffff0fe

08000f08 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2250      	movs	r2, #80	; 0x50
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_Stop+0x1e>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e029      	b.n	8000f7a <HAL_ADC_Stop+0x72>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2250      	movs	r2, #80	; 0x50
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000f2e:	250f      	movs	r5, #15
 8000f30:	197c      	adds	r4, r7, r5
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fa3e 	bl	80013b6 <ADC_ConversionStop>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000f3e:	197b      	adds	r3, r7, r5
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d112      	bne.n	8000f6c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000f46:	197c      	adds	r4, r7, r5
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f9cc 	bl	80012e8 <ADC_Disable>
 8000f50:	0003      	movs	r3, r0
 8000f52:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000f54:	197b      	adds	r3, r7, r5
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d107      	bne.n	8000f6c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f60:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_ADC_Stop+0x7c>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	2201      	movs	r2, #1
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2250      	movs	r2, #80	; 0x50
 8000f70:	2100      	movs	r1, #0
 8000f72:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b004      	add	sp, #16
 8000f80:	bdb0      	pop	{r4, r5, r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	fffffefe 	.word	0xfffffefe

08000f88 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d102      	bne.n	8000fa8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e014      	b.n	8000fd2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d10b      	bne.n	8000fce <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fba:	2220      	movs	r2, #32
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2250      	movs	r2, #80	; 0x50
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e072      	b.n	80010b4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000fce:	230c      	movs	r3, #12
 8000fd0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fd2:	f7ff fdc7 	bl	8000b64 <HAL_GetTick>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fda:	e01f      	b.n	800101c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	d01c      	beq.n	800101c <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <HAL_ADC_PollForConversion+0x70>
 8000fe8:	f7ff fdbc 	bl	8000b64 <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d211      	bcs.n	800101c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4013      	ands	r3, r2
 8001002:	d10b      	bne.n	800101c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001008:	2204      	movs	r2, #4
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2250      	movs	r2, #80	; 0x50
 8001014:	2100      	movs	r1, #0
 8001016:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e04b      	b.n	80010b4 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4013      	ands	r3, r2
 8001026:	d0d9      	beq.n	8000fdc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	23c0      	movs	r3, #192	; 0xc0
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	4013      	ands	r3, r2
 8001042:	d12e      	bne.n	80010a2 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2220      	movs	r2, #32
 8001048:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800104a:	2b00      	cmp	r3, #0
 800104c:	d129      	bne.n	80010a2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2208      	movs	r2, #8
 8001056:	4013      	ands	r3, r2
 8001058:	2b08      	cmp	r3, #8
 800105a:	d122      	bne.n	80010a2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2204      	movs	r2, #4
 8001064:	4013      	ands	r3, r2
 8001066:	d110      	bne.n	800108a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	210c      	movs	r1, #12
 8001074:	438a      	bics	r2, r1
 8001076:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_ADC_PollForConversion+0x134>)
 800107e:	4013      	ands	r3, r2
 8001080:	2201      	movs	r2, #1
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	655a      	str	r2, [r3, #84]	; 0x54
 8001088:	e00b      	b.n	80010a2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108e:	2220      	movs	r2, #32
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	2201      	movs	r2, #1
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b004      	add	sp, #16
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	fffffefe 	.word	0xfffffefe

080010c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b002      	add	sp, #8
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2250      	movs	r2, #80	; 0x50
 80010e6:	5c9b      	ldrb	r3, [r3, r2]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x18>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e085      	b.n	80011fc <HAL_ADC_ConfigChannel+0x124>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2250      	movs	r2, #80	; 0x50
 80010f4:	2101      	movs	r1, #1
 80010f6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2204      	movs	r2, #4
 8001100:	4013      	ands	r3, r2
 8001102:	d00b      	beq.n	800111c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001108:	2220      	movs	r2, #32
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2250      	movs	r2, #80	; 0x50
 8001114:	2100      	movs	r1, #0
 8001116:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e06f      	b.n	80011fc <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a38      	ldr	r2, [pc, #224]	; (8001204 <HAL_ADC_ConfigChannel+0x12c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d035      	beq.n	8001192 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	035b      	lsls	r3, r3, #13
 8001132:	0b5a      	lsrs	r2, r3, #13
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	02db      	lsls	r3, r3, #11
 8001144:	4013      	ands	r3, r2
 8001146:	d009      	beq.n	800115c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001148:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	0409      	lsls	r1, r1, #16
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001156:	200a      	movs	r0, #10
 8001158:	f000 f97a 	bl	8001450 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	029b      	lsls	r3, r3, #10
 8001164:	4013      	ands	r3, r2
 8001166:	d006      	beq.n	8001176 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	03c9      	lsls	r1, r1, #15
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	025b      	lsls	r3, r3, #9
 800117e:	4013      	ands	r3, r2
 8001180:	d037      	beq.n	80011f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0449      	lsls	r1, r1, #17
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e02f      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	035b      	lsls	r3, r3, #13
 800119e:	0b5b      	lsrs	r3, r3, #13
 80011a0:	43d9      	mvns	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	400a      	ands	r2, r1
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	02db      	lsls	r3, r3, #11
 80011b2:	4013      	ands	r3, r2
 80011b4:	d005      	beq.n	80011c2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <HAL_ADC_ConfigChannel+0x134>)
 80011be:	400a      	ands	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	029b      	lsls	r3, r3, #10
 80011ca:	4013      	ands	r3, r2
 80011cc:	d005      	beq.n	80011da <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 80011d4:	490e      	ldr	r1, [pc, #56]	; (8001210 <HAL_ADC_ConfigChannel+0x138>)
 80011d6:	400a      	ands	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	025b      	lsls	r3, r3, #9
 80011e2:	4013      	ands	r3, r2
 80011e4:	d005      	beq.n	80011f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <HAL_ADC_ConfigChannel+0x130>)
 80011ec:	4909      	ldr	r1, [pc, #36]	; (8001214 <HAL_ADC_ConfigChannel+0x13c>)
 80011ee:	400a      	ands	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2250      	movs	r2, #80	; 0x50
 80011f6:	2100      	movs	r1, #0
 80011f8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}
 8001204:	00001001 	.word	0x00001001
 8001208:	40012708 	.word	0x40012708
 800120c:	ff7fffff 	.word	0xff7fffff
 8001210:	ffbfffff 	.word	0xffbfffff
 8001214:	feffffff 	.word	0xfeffffff

08001218 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2203      	movs	r2, #3
 800122c:	4013      	ands	r3, r2
 800122e:	2b01      	cmp	r3, #1
 8001230:	d108      	bne.n	8001244 <ADC_Enable+0x2c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2201      	movs	r2, #1
 800123a:	4013      	ands	r3, r2
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <ADC_Enable+0x2c>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <ADC_Enable+0x2e>
 8001244:	2300      	movs	r3, #0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d146      	bne.n	80012d8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <ADC_Enable+0xcc>)
 8001252:	4013      	ands	r3, r2
 8001254:	d00d      	beq.n	8001272 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125a:	2210      	movs	r2, #16
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	2201      	movs	r2, #1
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e033      	b.n	80012da <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	430a      	orrs	r2, r1
 8001280:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001282:	2001      	movs	r0, #1
 8001284:	f000 f8e4 	bl	8001450 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001288:	f7ff fc6c 	bl	8000b64 <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001290:	e01b      	b.n	80012ca <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001292:	f7ff fc67 	bl	8000b64 <HAL_GetTick>
 8001296:	0002      	movs	r2, r0
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b0a      	cmp	r3, #10
 800129e:	d914      	bls.n	80012ca <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2201      	movs	r2, #1
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d00d      	beq.n	80012ca <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b2:	2210      	movs	r2, #16
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	2201      	movs	r2, #1
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e007      	b.n	80012da <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d1dc      	bne.n	8001292 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b004      	add	sp, #16
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	80000017 	.word	0x80000017

080012e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2203      	movs	r2, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <ADC_Disable+0x2c>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	4013      	ands	r3, r2
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <ADC_Disable+0x2c>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <ADC_Disable+0x2e>
 8001314:	2300      	movs	r3, #0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d048      	beq.n	80013ac <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2205      	movs	r2, #5
 8001322:	4013      	ands	r3, r2
 8001324:	2b01      	cmp	r3, #1
 8001326:	d110      	bne.n	800134a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2102      	movs	r1, #2
 8001334:	430a      	orrs	r2, r1
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2203      	movs	r2, #3
 800133e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001340:	f7ff fc10 	bl	8000b64 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001348:	e029      	b.n	800139e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134e:	2210      	movs	r2, #16
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	2201      	movs	r2, #1
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e023      	b.n	80013ae <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001366:	f7ff fbfd 	bl	8000b64 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b0a      	cmp	r3, #10
 8001372:	d914      	bls.n	800139e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2201      	movs	r2, #1
 800137c:	4013      	ands	r3, r2
 800137e:	2b01      	cmp	r3, #1
 8001380:	d10d      	bne.n	800139e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001386:	2210      	movs	r2, #16
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	2201      	movs	r2, #1
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e007      	b.n	80013ae <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2201      	movs	r2, #1
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d0dc      	beq.n	8001366 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b004      	add	sp, #16
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2204      	movs	r2, #4
 80013ca:	4013      	ands	r3, r2
 80013cc:	d03a      	beq.n	8001444 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2204      	movs	r2, #4
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d10d      	bne.n	80013f8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80013e6:	d107      	bne.n	80013f8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2110      	movs	r1, #16
 80013f4:	430a      	orrs	r2, r1
 80013f6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013f8:	f7ff fbb4 	bl	8000b64 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001400:	e01a      	b.n	8001438 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001402:	f7ff fbaf 	bl	8000b64 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d913      	bls.n	8001438 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2204      	movs	r2, #4
 8001418:	4013      	ands	r3, r2
 800141a:	d00d      	beq.n	8001438 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	2210      	movs	r2, #16
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	2201      	movs	r2, #1
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e006      	b.n	8001446 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2204      	movs	r2, #4
 8001440:	4013      	ands	r3, r2
 8001442:	d1de      	bne.n	8001402 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <ADC_DelayMicroSecond+0x38>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	490b      	ldr	r1, [pc, #44]	; (800148c <ADC_DelayMicroSecond+0x3c>)
 800145e:	0018      	movs	r0, r3
 8001460:	f7fe fe52 	bl	8000108 <__udivsi3>
 8001464:	0003      	movs	r3, r0
 8001466:	001a      	movs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4353      	muls	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800146e:	e002      	b.n	8001476 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3b01      	subs	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f9      	bne.n	8001470 <ADC_DelayMicroSecond+0x20>
  } 
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	20000000 	.word	0x20000000
 800148c:	000f4240 	.word	0x000f4240

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	0002      	movs	r2, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b7f      	cmp	r3, #127	; 0x7f
 80014a4:	d828      	bhi.n	80014f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a6:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <__NVIC_SetPriority+0xd4>)
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	33c0      	adds	r3, #192	; 0xc0
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	589b      	ldr	r3, [r3, r2]
 80014b6:	1dfa      	adds	r2, r7, #7
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	0011      	movs	r1, r2
 80014bc:	2203      	movs	r2, #3
 80014be:	400a      	ands	r2, r1
 80014c0:	00d2      	lsls	r2, r2, #3
 80014c2:	21ff      	movs	r1, #255	; 0xff
 80014c4:	4091      	lsls	r1, r2
 80014c6:	000a      	movs	r2, r1
 80014c8:	43d2      	mvns	r2, r2
 80014ca:	401a      	ands	r2, r3
 80014cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	019b      	lsls	r3, r3, #6
 80014d2:	22ff      	movs	r2, #255	; 0xff
 80014d4:	401a      	ands	r2, r3
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	0018      	movs	r0, r3
 80014dc:	2303      	movs	r3, #3
 80014de:	4003      	ands	r3, r0
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e4:	481f      	ldr	r0, [pc, #124]	; (8001564 <__NVIC_SetPriority+0xd4>)
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	430a      	orrs	r2, r1
 80014f0:	33c0      	adds	r3, #192	; 0xc0
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014f6:	e031      	b.n	800155c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <__NVIC_SetPriority+0xd8>)
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	0019      	movs	r1, r3
 8001500:	230f      	movs	r3, #15
 8001502:	400b      	ands	r3, r1
 8001504:	3b08      	subs	r3, #8
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3306      	adds	r3, #6
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	3304      	adds	r3, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	1dfa      	adds	r2, r7, #7
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	0011      	movs	r1, r2
 8001518:	2203      	movs	r2, #3
 800151a:	400a      	ands	r2, r1
 800151c:	00d2      	lsls	r2, r2, #3
 800151e:	21ff      	movs	r1, #255	; 0xff
 8001520:	4091      	lsls	r1, r2
 8001522:	000a      	movs	r2, r1
 8001524:	43d2      	mvns	r2, r2
 8001526:	401a      	ands	r2, r3
 8001528:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	22ff      	movs	r2, #255	; 0xff
 8001530:	401a      	ands	r2, r3
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	0018      	movs	r0, r3
 8001538:	2303      	movs	r3, #3
 800153a:	4003      	ands	r3, r0
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <__NVIC_SetPriority+0xd8>)
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	001c      	movs	r4, r3
 8001548:	230f      	movs	r3, #15
 800154a:	4023      	ands	r3, r4
 800154c:	3b08      	subs	r3, #8
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	430a      	orrs	r2, r1
 8001552:	3306      	adds	r3, #6
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	18c3      	adds	r3, r0, r3
 8001558:	3304      	adds	r3, #4
 800155a:	601a      	str	r2, [r3, #0]
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b003      	add	sp, #12
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	045b      	lsls	r3, r3, #17
 800157c:	429a      	cmp	r2, r3
 800157e:	d301      	bcc.n	8001584 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001580:	2301      	movs	r3, #1
 8001582:	e010      	b.n	80015a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <SysTick_Config+0x44>)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	3a01      	subs	r2, #1
 800158a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158c:	2301      	movs	r3, #1
 800158e:	425b      	negs	r3, r3
 8001590:	2103      	movs	r1, #3
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff ff7c 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x44>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x44>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b002      	add	sp, #8
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	210f      	movs	r1, #15
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	1c02      	adds	r2, r0, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	0011      	movs	r1, r2
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7ff ff5d 	bl	8001490 <__NVIC_SetPriority>
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b004      	add	sp, #16
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff ffbf 	bl	800156c <SysTick_Config>
 80015ee:	0003      	movs	r3, r0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e015      	b.n	8001636 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	791b      	ldrb	r3, [r3, #4]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d106      	bne.n	8001622 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff f975 	bl	800090c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	795b      	ldrb	r3, [r3, #5]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_DAC_ConfigChannel+0x20>
 800165c:	2302      	movs	r3, #2
 800165e:	e035      	b.n	80016cc <HAL_DAC_ConfigChannel+0x8c>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2202      	movs	r2, #2
 800166a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001674:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_DAC_ConfigChannel+0x94>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	409a      	lsls	r2, r3
 800167a:	0013      	movs	r3, r2
 800167c:	43da      	mvns	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	409a      	lsls	r2, r3
 8001696:	0013      	movs	r3, r2
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	21c0      	movs	r1, #192	; 0xc0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4099      	lsls	r1, r3
 80016b2:	000b      	movs	r3, r1
 80016b4:	43d9      	mvns	r1, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2201      	movs	r2, #1
 80016c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b006      	add	sp, #24
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	00000ffe 	.word	0x00000ffe

080016d8 <HAL_DAC_Start>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	795b      	ldrb	r3, [r3, #5]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_DAC_Start+0x1e>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e030      	b.n	8001758 <HAL_DAC_Start+0x80>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6819      	ldr	r1, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	409a      	lsls	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

  tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2204      	movs	r2, #4
 800171e:	4013      	ands	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2238      	movs	r2, #56	; 0x38
 800172a:	4013      	ands	r3, r2
 800172c:	60bb      	str	r3, [r7, #8]
  /* Check if software trigger enabled */
  if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d10a      	bne.n	800174a <HAL_DAC_Start+0x72>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b38      	cmp	r3, #56	; 0x38
 8001738:	d107      	bne.n	800174a <HAL_DAC_Start+0x72>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	b004      	add	sp, #16
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance; 
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	617b      	str	r3, [r7, #20]
  tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	3308      	adds	r3, #8
 8001780:	617b      	str	r3, [r7, #20]

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b006      	add	sp, #24
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017aa:	e14f      	b.n	8001a4c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4091      	lsls	r1, r2
 80017b6:	000a      	movs	r2, r1
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d100      	bne.n	80017c4 <HAL_GPIO_Init+0x30>
 80017c2:	e140      	b.n	8001a46 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d005      	beq.n	80017dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d130      	bne.n	800183e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	409a      	lsls	r2, r3
 80017ea:	0013      	movs	r3, r2
 80017ec:	43da      	mvns	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	409a      	lsls	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001812:	2201      	movs	r2, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
 8001818:	0013      	movs	r3, r2
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	2201      	movs	r2, #1
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2203      	movs	r2, #3
 8001844:	4013      	ands	r3, r2
 8001846:	2b03      	cmp	r3, #3
 8001848:	d017      	beq.n	800187a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	43da      	mvns	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	4013      	ands	r3, r2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d123      	bne.n	80018ce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	58d3      	ldr	r3, [r2, r3]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2207      	movs	r2, #7
 8001898:	4013      	ands	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	409a      	lsls	r2, r3
 80018a0:	0013      	movs	r3, r2
 80018a2:	43da      	mvns	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2107      	movs	r1, #7
 80018b2:	400b      	ands	r3, r1
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	6939      	ldr	r1, [r7, #16]
 80018cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	409a      	lsls	r2, r3
 80018dc:	0013      	movs	r3, r2
 80018de:	43da      	mvns	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2203      	movs	r2, #3
 80018ec:	401a      	ands	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	409a      	lsls	r2, r3
 80018f4:	0013      	movs	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	23c0      	movs	r3, #192	; 0xc0
 8001908:	029b      	lsls	r3, r3, #10
 800190a:	4013      	ands	r3, r2
 800190c:	d100      	bne.n	8001910 <HAL_GPIO_Init+0x17c>
 800190e:	e09a      	b.n	8001a46 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001910:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <HAL_GPIO_Init+0x2d0>)
 8001912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_GPIO_Init+0x2d0>)
 8001916:	2101      	movs	r1, #1
 8001918:	430a      	orrs	r2, r1
 800191a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_GPIO_Init+0x2d4>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	589b      	ldr	r3, [r3, r2]
 8001928:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2203      	movs	r2, #3
 800192e:	4013      	ands	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	409a      	lsls	r2, r3
 8001936:	0013      	movs	r3, r2
 8001938:	43da      	mvns	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	23a0      	movs	r3, #160	; 0xa0
 8001944:	05db      	lsls	r3, r3, #23
 8001946:	429a      	cmp	r2, r3
 8001948:	d019      	beq.n	800197e <HAL_GPIO_Init+0x1ea>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a47      	ldr	r2, [pc, #284]	; (8001a6c <HAL_GPIO_Init+0x2d8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x1e6>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a46      	ldr	r2, [pc, #280]	; (8001a70 <HAL_GPIO_Init+0x2dc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x1e2>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a45      	ldr	r2, [pc, #276]	; (8001a74 <HAL_GPIO_Init+0x2e0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x1de>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a44      	ldr	r2, [pc, #272]	; (8001a78 <HAL_GPIO_Init+0x2e4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x1da>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x1ec>
 800196e:	2306      	movs	r3, #6
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x1ec>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x1ec>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x1ec>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x1ec>
 800197e:	2300      	movs	r3, #0
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	2103      	movs	r1, #3
 8001984:	400a      	ands	r2, r1
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	; (8001a68 <HAL_GPIO_Init+0x2d4>)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43da      	mvns	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	025b      	lsls	r3, r3, #9
 80019b6:	4013      	ands	r3, r2
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80019c8:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43da      	mvns	r2, r3
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	4013      	ands	r3, r2
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43da      	mvns	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	035b      	lsls	r3, r3, #13
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	43da      	mvns	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	039b      	lsls	r3, r3, #14
 8001a34:	4013      	ands	r3, r2
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_GPIO_Init+0x2e8>)
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	40da      	lsrs	r2, r3
 8001a54:	1e13      	subs	r3, r2, #0
 8001a56:	d000      	beq.n	8001a5a <HAL_GPIO_Init+0x2c6>
 8001a58:	e6a8      	b.n	80017ac <HAL_GPIO_Init+0x18>
  }
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b006      	add	sp, #24
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	50000400 	.word	0x50000400
 8001a70:	50000800 	.word	0x50000800
 8001a74:	50000c00 	.word	0x50000c00
 8001a78:	50001c00 	.word	0x50001c00
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	0008      	movs	r0, r1
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	1cbb      	adds	r3, r7, #2
 8001a8e:	1c02      	adds	r2, r0, #0
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	1c7b      	adds	r3, r7, #1
 8001a94:	1c0a      	adds	r2, r1, #0
 8001a96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a98:	1c7b      	adds	r3, r7, #1
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa0:	1cbb      	adds	r3, r7, #2
 8001aa2:	881a      	ldrh	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001aaa:	1cbb      	adds	r3, r7, #2
 8001aac:	881a      	ldrh	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b002      	add	sp, #8
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f000 fbaf 	bl	800222e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad0:	4bcf      	ldr	r3, [pc, #828]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ada:	4bcd      	ldr	r3, [pc, #820]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	025b      	lsls	r3, r3, #9
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCC_OscConfig+0x36>
 8001af0:	e07e      	b.n	8001bf0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d007      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d112      	bne.n	8001b24 <HAL_RCC_OscConfig+0x68>
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	025b      	lsls	r3, r3, #9
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d10d      	bne.n	8001b24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	4bc1      	ldr	r3, [pc, #772]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	029b      	lsls	r3, r3, #10
 8001b10:	4013      	ands	r3, r2
 8001b12:	d100      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5a>
 8001b14:	e06b      	b.n	8001bee <HAL_RCC_OscConfig+0x132>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d167      	bne.n	8001bee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f000 fb85 	bl	800222e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	025b      	lsls	r3, r3, #9
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x84>
 8001b30:	4bb7      	ldr	r3, [pc, #732]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4bb6      	ldr	r3, [pc, #728]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	0249      	lsls	r1, r1, #9
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e027      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	23a0      	movs	r3, #160	; 0xa0
 8001b46:	02db      	lsls	r3, r3, #11
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d10e      	bne.n	8001b6a <HAL_RCC_OscConfig+0xae>
 8001b4c:	4bb0      	ldr	r3, [pc, #704]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4baf      	ldr	r3, [pc, #700]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	02c9      	lsls	r1, r1, #11
 8001b56:	430a      	orrs	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	4bad      	ldr	r3, [pc, #692]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4bac      	ldr	r3, [pc, #688]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0249      	lsls	r1, r1, #9
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e012      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b6a:	4ba9      	ldr	r3, [pc, #676]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4ba8      	ldr	r3, [pc, #672]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b70:	49a8      	ldr	r1, [pc, #672]	; (8001e14 <HAL_RCC_OscConfig+0x358>)
 8001b72:	400a      	ands	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	4ba6      	ldr	r3, [pc, #664]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4ba2      	ldr	r3, [pc, #648]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4ba1      	ldr	r3, [pc, #644]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001b8a:	49a3      	ldr	r1, [pc, #652]	; (8001e18 <HAL_RCC_OscConfig+0x35c>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d015      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7fe ffe4 	bl	8000b64 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba0:	e009      	b.n	8001bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba2:	f7fe ffdf 	bl	8000b64 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	; 0x64
 8001bae:	d902      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	f000 fb3c 	bl	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bb6:	4b96      	ldr	r3, [pc, #600]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d0ef      	beq.n	8001ba2 <HAL_RCC_OscConfig+0xe6>
 8001bc2:	e015      	b.n	8001bf0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ffce 	bl	8000b64 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bce:	f7fe ffc9 	bl	8000b64 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b64      	cmp	r3, #100	; 0x64
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e326      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001be0:	4b8b      	ldr	r3, [pc, #556]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	029b      	lsls	r3, r3, #10
 8001be8:	4013      	ands	r3, r2
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x112>
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <HAL_RCC_OscConfig+0x140>
 8001bfa:	e08b      	b.n	8001d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d13e      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1d0>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d13b      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c14:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d004      	beq.n	8001c28 <HAL_RCC_OscConfig+0x16c>
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e302      	b.n	800222e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b79      	ldr	r3, [pc, #484]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a7b      	ldr	r2, [pc, #492]	; (8001e1c <HAL_RCC_OscConfig+0x360>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	021a      	lsls	r2, r3, #8
 8001c38:	4b75      	ldr	r3, [pc, #468]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c3e:	4b74      	ldr	r3, [pc, #464]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2209      	movs	r2, #9
 8001c44:	4393      	bics	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	4b71      	ldr	r3, [pc, #452]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c50:	f000 fc40 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8001c54:	0001      	movs	r1, r0
 8001c56:	4b6e      	ldr	r3, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	4013      	ands	r3, r2
 8001c60:	4a6f      	ldr	r2, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x364>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	000a      	movs	r2, r1
 8001c66:	40da      	lsrs	r2, r3
 8001c68:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x368>)
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c6c:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x36c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2513      	movs	r5, #19
 8001c72:	197c      	adds	r4, r7, r5
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7fe ff2f 	bl	8000ad8 <HAL_InitTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c7e:	197b      	adds	r3, r7, r5
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d046      	beq.n	8001d14 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001c86:	197b      	adds	r3, r7, r5
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	e2d0      	b.n	800222e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d027      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c92:	4b5f      	ldr	r3, [pc, #380]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2209      	movs	r2, #9
 8001c98:	4393      	bics	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	4b5c      	ldr	r3, [pc, #368]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe ff5e 	bl	8000b64 <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cae:	f7fe ff59 	bl	8000b64 <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e2b6      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d0f1      	beq.n	8001cae <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b51      	ldr	r3, [pc, #324]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a53      	ldr	r2, [pc, #332]	; (8001e1c <HAL_RCC_OscConfig+0x360>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	021a      	lsls	r2, r3, #8
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	e018      	b.n	8001d14 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	438a      	bics	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7fe ff39 	bl	8000b64 <HAL_GetTick>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7fe ff34 	bl	8000b64 <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e291      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	4013      	ands	r3, r2
 8001d12:	d1f1      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2210      	movs	r2, #16
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <HAL_RCC_OscConfig+0x264>
 8001d1e:	e0a1      	b.n	8001e64 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d140      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d26:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d005      	beq.n	8001d3e <HAL_RCC_OscConfig+0x282>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e277      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a3a      	ldr	r2, [pc, #232]	; (8001e2c <HAL_RCC_OscConfig+0x370>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4c:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	0a19      	lsrs	r1, r3, #8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	061a      	lsls	r2, r3, #24
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	0b5b      	lsrs	r3, r3, #13
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	0212      	lsls	r2, r2, #8
 8001d72:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	4928      	ldr	r1, [pc, #160]	; (8001e20 <HAL_RCC_OscConfig+0x364>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x368>)
 8001d86:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x36c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2513      	movs	r5, #19
 8001d8e:	197c      	adds	r4, r7, r5
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7fe fea1 	bl	8000ad8 <HAL_InitTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d9a:	197b      	adds	r3, r7, r5
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d060      	beq.n	8001e64 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001da2:	197b      	adds	r3, r7, r5
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	e242      	b.n	800222e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d03f      	beq.n	8001e30 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0049      	lsls	r1, r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fed1 	bl	8000b64 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc8:	f7fe fecc 	bl	8000b64 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e229      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_RCC_OscConfig+0x370>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	0a19      	lsrs	r1, r3, #8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	061a      	lsls	r2, r3, #24
 8001e08:	4b01      	ldr	r3, [pc, #4]	; (8001e10 <HAL_RCC_OscConfig+0x354>)
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	e029      	b.n	8001e64 <HAL_RCC_OscConfig+0x3a8>
 8001e10:	40021000 	.word	0x40021000
 8001e14:	fffeffff 	.word	0xfffeffff
 8001e18:	fffbffff 	.word	0xfffbffff
 8001e1c:	ffffe0ff 	.word	0xffffe0ff
 8001e20:	0800332c 	.word	0x0800332c
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004
 8001e2c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e30:	4bbd      	ldr	r3, [pc, #756]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4bbc      	ldr	r3, [pc, #752]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001e36:	49bd      	ldr	r1, [pc, #756]	; (800212c <HAL_RCC_OscConfig+0x670>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fe92 	bl	8000b64 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e46:	f7fe fe8d 	bl	8000b64 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e1ea      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e58:	4bb3      	ldr	r3, [pc, #716]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d036      	beq.n	8001edc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d019      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4bac      	ldr	r3, [pc, #688]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e7a:	4bab      	ldr	r3, [pc, #684]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7fe fe6f 	bl	8000b64 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fe6a 	bl	8000b64 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1c7      	b.n	800222e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e9e:	4ba2      	ldr	r3, [pc, #648]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d0f1      	beq.n	8001e8c <HAL_RCC_OscConfig+0x3d0>
 8001ea8:	e018      	b.n	8001edc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eaa:	4b9f      	ldr	r3, [pc, #636]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eae:	4b9e      	ldr	r3, [pc, #632]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fe55 	bl	8000b64 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fe50 	bl	8000b64 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1ad      	b.n	800222e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ed2:	4b95      	ldr	r3, [pc, #596]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d1f1      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d100      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x42c>
 8001ee6:	e0ae      	b.n	8002046 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee8:	2027      	movs	r0, #39	; 0x27
 8001eea:	183b      	adds	r3, r7, r0
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef0:	4b8d      	ldr	r3, [pc, #564]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	055b      	lsls	r3, r3, #21
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d109      	bne.n	8001f10 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	4b8a      	ldr	r3, [pc, #552]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f00:	4b89      	ldr	r3, [pc, #548]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0549      	lsls	r1, r1, #21
 8001f06:	430a      	orrs	r2, r1
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f0a:	183b      	adds	r3, r7, r0
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b87      	ldr	r3, [pc, #540]	; (8002130 <HAL_RCC_OscConfig+0x674>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d11a      	bne.n	8001f52 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1c:	4b84      	ldr	r3, [pc, #528]	; (8002130 <HAL_RCC_OscConfig+0x674>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b83      	ldr	r3, [pc, #524]	; (8002130 <HAL_RCC_OscConfig+0x674>)
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	0049      	lsls	r1, r1, #1
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2a:	f7fe fe1b 	bl	8000b64 <HAL_GetTick>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f34:	f7fe fe16 	bl	8000b64 <HAL_GetTick>
 8001f38:	0002      	movs	r2, r0
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e173      	b.n	800222e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f46:	4b7a      	ldr	r3, [pc, #488]	; (8002130 <HAL_RCC_OscConfig+0x674>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4b2>
 8001f5e:	4b72      	ldr	r3, [pc, #456]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f62:	4b71      	ldr	r3, [pc, #452]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	0049      	lsls	r1, r1, #1
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f6c:	e031      	b.n	8001fd2 <HAL_RCC_OscConfig+0x516>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4d4>
 8001f76:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7a:	4b6b      	ldr	r3, [pc, #428]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001f7c:	496b      	ldr	r1, [pc, #428]	; (800212c <HAL_RCC_OscConfig+0x670>)
 8001f7e:	400a      	ands	r2, r1
 8001f80:	651a      	str	r2, [r3, #80]	; 0x50
 8001f82:	4b69      	ldr	r3, [pc, #420]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001f84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f86:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001f88:	496a      	ldr	r1, [pc, #424]	; (8002134 <HAL_RCC_OscConfig+0x678>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f8e:	e020      	b.n	8001fd2 <HAL_RCC_OscConfig+0x516>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	23a0      	movs	r3, #160	; 0xa0
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d10e      	bne.n	8001fba <HAL_RCC_OscConfig+0x4fe>
 8001f9c:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa0:	4b61      	ldr	r3, [pc, #388]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	00c9      	lsls	r1, r1, #3
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	651a      	str	r2, [r3, #80]	; 0x50
 8001faa:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fae:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	0049      	lsls	r1, r1, #1
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	651a      	str	r2, [r3, #80]	; 0x50
 8001fb8:	e00b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x516>
 8001fba:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fbe:	4b5a      	ldr	r3, [pc, #360]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001fc0:	495a      	ldr	r1, [pc, #360]	; (800212c <HAL_RCC_OscConfig+0x670>)
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	651a      	str	r2, [r3, #80]	; 0x50
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fca:	4b57      	ldr	r3, [pc, #348]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001fcc:	4959      	ldr	r1, [pc, #356]	; (8002134 <HAL_RCC_OscConfig+0x678>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d015      	beq.n	8002006 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7fe fdc3 	bl	8000b64 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fe2:	e009      	b.n	8001ff8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fdbe 	bl	8000b64 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	4a52      	ldr	r2, [pc, #328]	; (8002138 <HAL_RCC_OscConfig+0x67c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e11a      	b.n	800222e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff8:	4b4b      	ldr	r3, [pc, #300]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8001ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4013      	ands	r3, r2
 8002002:	d0ef      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x528>
 8002004:	e014      	b.n	8002030 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002006:	f7fe fdad 	bl	8000b64 <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800200e:	e009      	b.n	8002024 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7fe fda8 	bl	8000b64 <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	4a47      	ldr	r2, [pc, #284]	; (8002138 <HAL_RCC_OscConfig+0x67c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e104      	b.n	800222e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002024:	4b40      	ldr	r3, [pc, #256]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8002026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d1ef      	bne.n	8002010 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002030:	2327      	movs	r3, #39	; 0x27
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 800203c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203e:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8002040:	493e      	ldr	r1, [pc, #248]	; (800213c <HAL_RCC_OscConfig+0x680>)
 8002042:	400a      	ands	r2, r1
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2220      	movs	r2, #32
 800204c:	4013      	ands	r3, r2
 800204e:	d049      	beq.n	80020e4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d026      	beq.n	80020a6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002058:	4b33      	ldr	r3, [pc, #204]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4b32      	ldr	r3, [pc, #200]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 800205e:	2101      	movs	r1, #1
 8002060:	430a      	orrs	r2, r1
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8002066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002068:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 800206a:	2101      	movs	r1, #1
 800206c:	430a      	orrs	r2, r1
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
 8002070:	4b33      	ldr	r3, [pc, #204]	; (8002140 <HAL_RCC_OscConfig+0x684>)
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	4b32      	ldr	r3, [pc, #200]	; (8002140 <HAL_RCC_OscConfig+0x684>)
 8002076:	2180      	movs	r1, #128	; 0x80
 8002078:	0189      	lsls	r1, r1, #6
 800207a:	430a      	orrs	r2, r1
 800207c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe fd71 	bl	8000b64 <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002088:	f7fe fd6c 	bl	8000b64 <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0c9      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d0f1      	beq.n	8002088 <HAL_RCC_OscConfig+0x5cc>
 80020a4:	e01e      	b.n	80020e4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 80020ac:	2101      	movs	r1, #1
 80020ae:	438a      	bics	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_RCC_OscConfig+0x684>)
 80020b4:	6a1a      	ldr	r2, [r3, #32]
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_RCC_OscConfig+0x684>)
 80020b8:	4922      	ldr	r1, [pc, #136]	; (8002144 <HAL_RCC_OscConfig+0x688>)
 80020ba:	400a      	ands	r2, r1
 80020bc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7fe fd51 	bl	8000b64 <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c8:	f7fe fd4c 	bl	8000b64 <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0a9      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2202      	movs	r2, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d1f1      	bne.n	80020c8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d100      	bne.n	80020ee <HAL_RCC_OscConfig+0x632>
 80020ec:	e09e      	b.n	800222c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d100      	bne.n	80020f6 <HAL_RCC_OscConfig+0x63a>
 80020f4:	e077      	b.n	80021e6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d158      	bne.n	80021b0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_OscConfig+0x66c>)
 8002104:	4910      	ldr	r1, [pc, #64]	; (8002148 <HAL_RCC_OscConfig+0x68c>)
 8002106:	400a      	ands	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fd2b 	bl	8000b64 <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002112:	e01b      	b.n	800214c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe fd26 	bl	8000b64 <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d914      	bls.n	800214c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e083      	b.n	800222e <HAL_RCC_OscConfig+0x772>
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	40021000 	.word	0x40021000
 800212c:	fffffeff 	.word	0xfffffeff
 8002130:	40007000 	.word	0x40007000
 8002134:	fffffbff 	.word	0xfffffbff
 8002138:	00001388 	.word	0x00001388
 800213c:	efffffff 	.word	0xefffffff
 8002140:	40010000 	.word	0x40010000
 8002144:	ffffdfff 	.word	0xffffdfff
 8002148:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	049b      	lsls	r3, r3, #18
 8002154:	4013      	ands	r3, r2
 8002156:	d1dd      	bne.n	8002114 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002158:	4b37      	ldr	r3, [pc, #220]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a37      	ldr	r2, [pc, #220]	; (800223c <HAL_RCC_OscConfig+0x780>)
 800215e:	4013      	ands	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002170:	431a      	orrs	r2, r3
 8002172:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	0449      	lsls	r1, r1, #17
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe fced 	bl	8000b64 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe fce8 	bl	8000b64 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e045      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	049b      	lsls	r3, r3, #18
 80021aa:	4013      	ands	r3, r2
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x6d4>
 80021ae:	e03d      	b.n	800222c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 80021b6:	4922      	ldr	r1, [pc, #136]	; (8002240 <HAL_RCC_OscConfig+0x784>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7fe fcd2 	bl	8000b64 <HAL_GetTick>
 80021c0:	0003      	movs	r3, r0
 80021c2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c6:	f7fe fccd 	bl	8000b64 <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e02a      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	049b      	lsls	r3, r3, #18
 80021e0:	4013      	ands	r3, r2
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0x70a>
 80021e4:	e022      	b.n	800222c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e01d      	b.n	800222e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	025b      	lsls	r3, r3, #9
 80021fe:	401a      	ands	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	429a      	cmp	r2, r3
 8002206:	d10f      	bne.n	8002228 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	23f0      	movs	r3, #240	; 0xf0
 800220c:	039b      	lsls	r3, r3, #14
 800220e:	401a      	ands	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	23c0      	movs	r3, #192	; 0xc0
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	401a      	ands	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b00a      	add	sp, #40	; 0x28
 8002234:	bdb0      	pop	{r4, r5, r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	40021000 	.word	0x40021000
 800223c:	ff02ffff 	.word	0xff02ffff
 8002240:	feffffff 	.word	0xfeffffff

08002244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002244:	b5b0      	push	{r4, r5, r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e128      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002258:	4b96      	ldr	r3, [pc, #600]	; (80024b4 <HAL_RCC_ClockConfig+0x270>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2201      	movs	r2, #1
 800225e:	4013      	ands	r3, r2
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d91e      	bls.n	80022a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b93      	ldr	r3, [pc, #588]	; (80024b4 <HAL_RCC_ClockConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	4393      	bics	r3, r2
 800226e:	0019      	movs	r1, r3
 8002270:	4b90      	ldr	r3, [pc, #576]	; (80024b4 <HAL_RCC_ClockConfig+0x270>)
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002278:	f7fe fc74 	bl	8000b64 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002280:	e009      	b.n	8002296 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002282:	f7fe fc6f 	bl	8000b64 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	4a8a      	ldr	r2, [pc, #552]	; (80024b8 <HAL_RCC_ClockConfig+0x274>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e109      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <HAL_RCC_ClockConfig+0x270>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	4013      	ands	r3, r2
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1ee      	bne.n	8002282 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2202      	movs	r2, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ae:	4b83      	ldr	r3, [pc, #524]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	22f0      	movs	r2, #240	; 0xf0
 80022b4:	4393      	bics	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d100      	bne.n	80022ce <HAL_RCC_ClockConfig+0x8a>
 80022cc:	e089      	b.n	80023e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022d6:	4b79      	ldr	r3, [pc, #484]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	029b      	lsls	r3, r3, #10
 80022de:	4013      	ands	r3, r2
 80022e0:	d120      	bne.n	8002324 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0e1      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ee:	4b73      	ldr	r3, [pc, #460]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	049b      	lsls	r3, r3, #18
 80022f6:	4013      	ands	r3, r2
 80022f8:	d114      	bne.n	8002324 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0d5      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d106      	bne.n	8002314 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002306:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2204      	movs	r2, #4
 800230c:	4013      	ands	r3, r2
 800230e:	d109      	bne.n	8002324 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0ca      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002314:	4b69      	ldr	r3, [pc, #420]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4013      	ands	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0c2      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002324:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2203      	movs	r2, #3
 800232a:	4393      	bics	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4b62      	ldr	r3, [pc, #392]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002334:	430a      	orrs	r2, r1
 8002336:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7fe fc14 	bl	8000b64 <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d111      	bne.n	800236c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002348:	e009      	b.n	800235e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234a:	f7fe fc0b 	bl	8000b64 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <HAL_RCC_ClockConfig+0x274>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0a5      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800235e:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	220c      	movs	r2, #12
 8002364:	4013      	ands	r3, r2
 8002366:	2b08      	cmp	r3, #8
 8002368:	d1ef      	bne.n	800234a <HAL_RCC_ClockConfig+0x106>
 800236a:	e03a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d111      	bne.n	8002398 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002374:	e009      	b.n	800238a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002376:	f7fe fbf5 	bl	8000b64 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	4a4d      	ldr	r2, [pc, #308]	; (80024b8 <HAL_RCC_ClockConfig+0x274>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e08f      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800238a:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	220c      	movs	r2, #12
 8002390:	4013      	ands	r3, r2
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d1ef      	bne.n	8002376 <HAL_RCC_ClockConfig+0x132>
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d11b      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a0:	e009      	b.n	80023b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a2:	f7fe fbdf 	bl	8000b64 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4a42      	ldr	r2, [pc, #264]	; (80024b8 <HAL_RCC_ClockConfig+0x274>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e079      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b6:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	220c      	movs	r2, #12
 80023bc:	4013      	ands	r3, r2
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d1ef      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x15e>
 80023c2:	e00e      	b.n	80023e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7fe fbce 	bl	8000b64 <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <HAL_RCC_ClockConfig+0x274>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e068      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023d8:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	220c      	movs	r2, #12
 80023de:	4013      	ands	r3, r2
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_RCC_ClockConfig+0x270>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	4013      	ands	r3, r2
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d21e      	bcs.n	800242e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f0:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <HAL_RCC_ClockConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	4393      	bics	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <HAL_RCC_ClockConfig+0x270>)
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002402:	f7fe fbaf 	bl	8000b64 <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	e009      	b.n	8002420 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7fe fbaa 	bl	8000b64 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <HAL_RCC_ClockConfig+0x274>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e044      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002420:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_RCC_ClockConfig+0x270>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2201      	movs	r2, #1
 8002426:	4013      	ands	r3, r2
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d1ee      	bne.n	800240c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2204      	movs	r2, #4
 8002434:	4013      	ands	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002438:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <HAL_RCC_ClockConfig+0x27c>)
 800243e:	4013      	ands	r3, r2
 8002440:	0019      	movs	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002448:	430a      	orrs	r2, r1
 800244a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2208      	movs	r2, #8
 8002452:	4013      	ands	r3, r2
 8002454:	d00a      	beq.n	800246c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_RCC_ClockConfig+0x280>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	00da      	lsls	r2, r3, #3
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002468:	430a      	orrs	r2, r1
 800246a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800246c:	f000 f832 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002470:	0001      	movs	r1, r0
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x278>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	220f      	movs	r2, #15
 800247a:	4013      	ands	r3, r2
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x284>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	000a      	movs	r2, r1
 8002482:	40da      	lsrs	r2, r3
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_RCC_ClockConfig+0x288>)
 8002486:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_RCC_ClockConfig+0x28c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	250b      	movs	r5, #11
 800248e:	197c      	adds	r4, r7, r5
 8002490:	0018      	movs	r0, r3
 8002492:	f7fe fb21 	bl	8000ad8 <HAL_InitTick>
 8002496:	0003      	movs	r3, r0
 8002498:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800249a:	197b      	adds	r3, r7, r5
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80024a2:	197b      	adds	r3, r7, r5
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	e000      	b.n	80024aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bdb0      	pop	{r4, r5, r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	40022000 	.word	0x40022000
 80024b8:	00001388 	.word	0x00001388
 80024bc:	40021000 	.word	0x40021000
 80024c0:	fffff8ff 	.word	0xfffff8ff
 80024c4:	ffffc7ff 	.word	0xffffc7ff
 80024c8:	0800332c 	.word	0x0800332c
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b08e      	sub	sp, #56	; 0x38
 80024d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80024da:	4b4c      	ldr	r3, [pc, #304]	; (800260c <HAL_RCC_GetSysClockFreq+0x138>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e2:	230c      	movs	r3, #12
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d014      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x40>
 80024ea:	d900      	bls.n	80024ee <HAL_RCC_GetSysClockFreq+0x1a>
 80024ec:	e07b      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x112>
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d002      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x24>
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d00b      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x3a>
 80024f6:	e076      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024f8:	4b44      	ldr	r3, [pc, #272]	; (800260c <HAL_RCC_GetSysClockFreq+0x138>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2210      	movs	r2, #16
 80024fe:	4013      	ands	r3, r2
 8002500:	d002      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002502:	4b43      	ldr	r3, [pc, #268]	; (8002610 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002504:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002506:	e07c      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002508:	4b42      	ldr	r3, [pc, #264]	; (8002614 <HAL_RCC_GetSysClockFreq+0x140>)
 800250a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800250c:	e079      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800250e:	4b42      	ldr	r3, [pc, #264]	; (8002618 <HAL_RCC_GetSysClockFreq+0x144>)
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002512:	e076      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	0c9a      	lsrs	r2, r3, #18
 8002518:	230f      	movs	r3, #15
 800251a:	401a      	ands	r2, r3
 800251c:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_RCC_GetSysClockFreq+0x148>)
 800251e:	5c9b      	ldrb	r3, [r3, r2]
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	0d9a      	lsrs	r2, r3, #22
 8002526:	2303      	movs	r3, #3
 8002528:	4013      	ands	r3, r2
 800252a:	3301      	adds	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_RCC_GetSysClockFreq+0x138>)
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	4013      	ands	r3, r2
 8002538:	d01a      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	4a35      	ldr	r2, [pc, #212]	; (8002618 <HAL_RCC_GetSysClockFreq+0x144>)
 8002544:	2300      	movs	r3, #0
 8002546:	69b8      	ldr	r0, [r7, #24]
 8002548:	69f9      	ldr	r1, [r7, #28]
 800254a:	f7fd fe89 	bl	8000260 <__aeabi_lmul>
 800254e:	0002      	movs	r2, r0
 8002550:	000b      	movs	r3, r1
 8002552:	0010      	movs	r0, r2
 8002554:	0019      	movs	r1, r3
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f7fd fe5d 	bl	8000220 <__aeabi_uldivmod>
 8002566:	0002      	movs	r2, r0
 8002568:	000b      	movs	r3, r1
 800256a:	0013      	movs	r3, r2
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
 800256e:	e037      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <HAL_RCC_GetSysClockFreq+0x138>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2210      	movs	r2, #16
 8002576:	4013      	ands	r3, r2
 8002578:	d01a      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4a23      	ldr	r2, [pc, #140]	; (8002610 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002584:	2300      	movs	r3, #0
 8002586:	68b8      	ldr	r0, [r7, #8]
 8002588:	68f9      	ldr	r1, [r7, #12]
 800258a:	f7fd fe69 	bl	8000260 <__aeabi_lmul>
 800258e:	0002      	movs	r2, r0
 8002590:	000b      	movs	r3, r1
 8002592:	0010      	movs	r0, r2
 8002594:	0019      	movs	r1, r3
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f7fd fe3d 	bl	8000220 <__aeabi_uldivmod>
 80025a6:	0002      	movs	r2, r0
 80025a8:	000b      	movs	r3, r1
 80025aa:	0013      	movs	r3, r2
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
 80025ae:	e017      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	0018      	movs	r0, r3
 80025b4:	2300      	movs	r3, #0
 80025b6:	0019      	movs	r1, r3
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_RCC_GetSysClockFreq+0x140>)
 80025ba:	2300      	movs	r3, #0
 80025bc:	f7fd fe50 	bl	8000260 <__aeabi_lmul>
 80025c0:	0002      	movs	r2, r0
 80025c2:	000b      	movs	r3, r1
 80025c4:	0010      	movs	r0, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	001c      	movs	r4, r3
 80025cc:	2300      	movs	r3, #0
 80025ce:	001d      	movs	r5, r3
 80025d0:	0022      	movs	r2, r4
 80025d2:	002b      	movs	r3, r5
 80025d4:	f7fd fe24 	bl	8000220 <__aeabi_uldivmod>
 80025d8:	0002      	movs	r2, r0
 80025da:	000b      	movs	r3, r1
 80025dc:	0013      	movs	r3, r2
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e4:	e00d      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_GetSysClockFreq+0x138>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0b5b      	lsrs	r3, r3, #13
 80025ec:	2207      	movs	r2, #7
 80025ee:	4013      	ands	r3, r2
 80025f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	3301      	adds	r3, #1
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	0212      	lsls	r2, r2, #8
 80025fa:	409a      	lsls	r2, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002600:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b00e      	add	sp, #56	; 0x38
 800260a:	bdb0      	pop	{r4, r5, r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	003d0900 	.word	0x003d0900
 8002614:	00f42400 	.word	0x00f42400
 8002618:	007a1200 	.word	0x007a1200
 800261c:	08003344 	.word	0x08003344

08002620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b02      	ldr	r3, [pc, #8]	; (8002630 <HAL_RCC_GetHCLKFreq+0x10>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	20000000 	.word	0x20000000

08002634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002638:	f7ff fff2 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 800263c:	0001      	movs	r1, r0
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	2207      	movs	r2, #7
 8002646:	4013      	ands	r3, r2
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_RCC_GetPCLK1Freq+0x28>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	40d9      	lsrs	r1, r3
 800264e:	000b      	movs	r3, r1
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	40021000 	.word	0x40021000
 800265c:	0800333c 	.word	0x0800333c

08002660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002664:	f7ff ffdc 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002668:	0001      	movs	r1, r0
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	0adb      	lsrs	r3, r3, #11
 8002670:	2207      	movs	r2, #7
 8002672:	4013      	ands	r3, r2
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	40d9      	lsrs	r1, r3
 800267a:	000b      	movs	r3, r1
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40021000 	.word	0x40021000
 8002688:	0800333c 	.word	0x0800333c

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002694:	2317      	movs	r3, #23
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2220      	movs	r2, #32
 80026a2:	4013      	ands	r3, r2
 80026a4:	d106      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	4013      	ands	r3, r2
 80026b0:	d100      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80026b2:	e0d9      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b4:	4b9c      	ldr	r3, [pc, #624]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	d10a      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	4b99      	ldr	r3, [pc, #612]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c4:	4b98      	ldr	r3, [pc, #608]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0549      	lsls	r1, r1, #21
 80026ca:	430a      	orrs	r2, r1
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026ce:	2317      	movs	r3, #23
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b95      	ldr	r3, [pc, #596]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	d11a      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b92      	ldr	r3, [pc, #584]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b91      	ldr	r3, [pc, #580]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0049      	lsls	r1, r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f0:	f7fe fa38 	bl	8000b64 <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7fe fa33 	bl	8000b64 <HAL_GetTick>
 80026fe:	0002      	movs	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b64      	cmp	r3, #100	; 0x64
 8002706:	d901      	bls.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e108      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4b87      	ldr	r3, [pc, #540]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d0f0      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002718:	4b83      	ldr	r3, [pc, #524]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	039b      	lsls	r3, r3, #14
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	23c0      	movs	r3, #192	; 0xc0
 800272a:	039b      	lsls	r3, r3, #14
 800272c:	4013      	ands	r3, r2
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d107      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	23c0      	movs	r3, #192	; 0xc0
 800273a:	039b      	lsls	r3, r3, #14
 800273c:	4013      	ands	r3, r2
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	d013      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	23c0      	movs	r3, #192	; 0xc0
 800274a:	029b      	lsls	r3, r3, #10
 800274c:	401a      	ands	r2, r3
 800274e:	23c0      	movs	r3, #192	; 0xc0
 8002750:	029b      	lsls	r3, r3, #10
 8002752:	429a      	cmp	r2, r3
 8002754:	d10a      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002756:	4b74      	ldr	r3, [pc, #464]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	029b      	lsls	r3, r3, #10
 800275e:	401a      	ands	r2, r3
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	429a      	cmp	r2, r3
 8002766:	d101      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0d8      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800276c:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800276e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d049      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	23c0      	movs	r3, #192	; 0xc0
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	4013      	ands	r3, r2
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	429a      	cmp	r2, r3
 800278c:	d004      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2220      	movs	r2, #32
 8002794:	4013      	ands	r3, r2
 8002796:	d10d      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	4013      	ands	r3, r2
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d034      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4013      	ands	r3, r2
 80027b2:	d02e      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027b4:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80027b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b8:	4a5d      	ldr	r2, [pc, #372]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027be:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80027c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c2:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0309      	lsls	r1, r1, #12
 80027c8:	430a      	orrs	r2, r1
 80027ca:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027cc:	4b56      	ldr	r3, [pc, #344]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80027ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027d0:	4b55      	ldr	r3, [pc, #340]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80027d2:	4958      	ldr	r1, [pc, #352]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d014      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe f9bc 	bl	8000b64 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f0:	e009      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe f9b7 	bl	8000b64 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4a4e      	ldr	r2, [pc, #312]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e08b      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002806:	4b48      	ldr	r3, [pc, #288]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4013      	ands	r3, r2
 8002810:	d0ef      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	23c0      	movs	r3, #192	; 0xc0
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	401a      	ands	r2, r3
 800281c:	23c0      	movs	r3, #192	; 0xc0
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	429a      	cmp	r2, r3
 8002822:	d10c      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002824:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a44      	ldr	r2, [pc, #272]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	23c0      	movs	r3, #192	; 0xc0
 8002834:	039b      	lsls	r3, r3, #14
 8002836:	401a      	ands	r2, r3
 8002838:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002840:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	23c0      	movs	r3, #192	; 0xc0
 8002848:	029b      	lsls	r3, r3, #10
 800284a:	401a      	ands	r2, r3
 800284c:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800284e:	430a      	orrs	r2, r1
 8002850:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002852:	2317      	movs	r3, #23
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800285e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002862:	4937      	ldr	r1, [pc, #220]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002864:	400a      	ands	r2, r1
 8002866:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4013      	ands	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	2203      	movs	r2, #3
 8002878:	4393      	bics	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	4b29      	ldr	r3, [pc, #164]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002882:	430a      	orrs	r2, r1
 8002884:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2202      	movs	r2, #2
 800288c:	4013      	ands	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002894:	220c      	movs	r2, #12
 8002896:	4393      	bics	r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028a0:	430a      	orrs	r2, r1
 80028a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2204      	movs	r2, #4
 80028aa:	4013      	ands	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028be:	430a      	orrs	r2, r1
 80028c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2208      	movs	r2, #8
 80028c8:	4013      	ands	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	4b13      	ldr	r3, [pc, #76]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	4013      	ands	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	4013      	ands	r3, r2
 8002906:	d009      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290c:	4a10      	ldr	r2, [pc, #64]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800290e:	4013      	ands	r3, r2
 8002910:	0019      	movs	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002918:	430a      	orrs	r2, r1
 800291a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b006      	add	sp, #24
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
 8002930:	fffcffff 	.word	0xfffcffff
 8002934:	fff7ffff 	.word	0xfff7ffff
 8002938:	00001388 	.word	0x00001388
 800293c:	ffcfffff 	.word	0xffcfffff
 8002940:	efffffff 	.word	0xefffffff
 8002944:	fffff3ff 	.word	0xfffff3ff
 8002948:	ffffcfff 	.word	0xffffcfff
 800294c:	fbffffff 	.word	0xfbffffff
 8002950:	fff3ffff 	.word	0xfff3ffff

08002954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e044      	b.n	80029f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296a:	2b00      	cmp	r3, #0
 800296c:	d107      	bne.n	800297e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2274      	movs	r2, #116	; 0x74
 8002972:	2100      	movs	r1, #0
 8002974:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0018      	movs	r0, r3
 800297a:	f7fe f803 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2224      	movs	r2, #36	; 0x24
 8002982:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	438a      	bics	r2, r1
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0018      	movs	r0, r3
 8002998:	f000 f830 	bl	80029fc <UART_SetConfig>
 800299c:	0003      	movs	r3, r0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e024      	b.n	80029f0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 fac3 	bl	8002f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	490d      	ldr	r1, [pc, #52]	; (80029f8 <HAL_UART_Init+0xa4>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	212a      	movs	r1, #42	; 0x2a
 80029d2:	438a      	bics	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	430a      	orrs	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 fb5b 	bl	80030a4 <UART_CheckIdleState>
 80029ee:	0003      	movs	r3, r0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	ffffb7ff 	.word	0xffffb7ff

080029fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a04:	231a      	movs	r3, #26
 8002a06:	2218      	movs	r2, #24
 8002a08:	4694      	mov	ip, r2
 8002a0a:	44bc      	add	ip, r7
 8002a0c:	4463      	add	r3, ip
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4ac1      	ldr	r2, [pc, #772]	; (8002d38 <UART_SetConfig+0x33c>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	0019      	movs	r1, r3
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4abd      	ldr	r2, [pc, #756]	; (8002d3c <UART_SetConfig+0x340>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4ab7      	ldr	r2, [pc, #732]	; (8002d40 <UART_SetConfig+0x344>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4ab2      	ldr	r2, [pc, #712]	; (8002d44 <UART_SetConfig+0x348>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4aae      	ldr	r2, [pc, #696]	; (8002d48 <UART_SetConfig+0x34c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d136      	bne.n	8002b00 <UART_SetConfig+0x104>
 8002a92:	4bae      	ldr	r3, [pc, #696]	; (8002d4c <UART_SetConfig+0x350>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	2203      	movs	r2, #3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d020      	beq.n	8002ae0 <UART_SetConfig+0xe4>
 8002a9e:	d827      	bhi.n	8002af0 <UART_SetConfig+0xf4>
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d00d      	beq.n	8002ac0 <UART_SetConfig+0xc4>
 8002aa4:	d824      	bhi.n	8002af0 <UART_SetConfig+0xf4>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <UART_SetConfig+0xb4>
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d010      	beq.n	8002ad0 <UART_SetConfig+0xd4>
 8002aae:	e01f      	b.n	8002af0 <UART_SetConfig+0xf4>
 8002ab0:	231b      	movs	r3, #27
 8002ab2:	2218      	movs	r2, #24
 8002ab4:	4694      	mov	ip, r2
 8002ab6:	44bc      	add	ip, r7
 8002ab8:	4463      	add	r3, ip
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e0ab      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002ac0:	231b      	movs	r3, #27
 8002ac2:	2218      	movs	r2, #24
 8002ac4:	4694      	mov	ip, r2
 8002ac6:	44bc      	add	ip, r7
 8002ac8:	4463      	add	r3, ip
 8002aca:	2202      	movs	r2, #2
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e0a3      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002ad0:	231b      	movs	r3, #27
 8002ad2:	2218      	movs	r2, #24
 8002ad4:	4694      	mov	ip, r2
 8002ad6:	44bc      	add	ip, r7
 8002ad8:	4463      	add	r3, ip
 8002ada:	2204      	movs	r2, #4
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e09b      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002ae0:	231b      	movs	r3, #27
 8002ae2:	2218      	movs	r2, #24
 8002ae4:	4694      	mov	ip, r2
 8002ae6:	44bc      	add	ip, r7
 8002ae8:	4463      	add	r3, ip
 8002aea:	2208      	movs	r2, #8
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e093      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002af0:	231b      	movs	r3, #27
 8002af2:	2218      	movs	r2, #24
 8002af4:	4694      	mov	ip, r2
 8002af6:	44bc      	add	ip, r7
 8002af8:	4463      	add	r3, ip
 8002afa:	2210      	movs	r2, #16
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e08b      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a92      	ldr	r2, [pc, #584]	; (8002d50 <UART_SetConfig+0x354>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d136      	bne.n	8002b78 <UART_SetConfig+0x17c>
 8002b0a:	4b90      	ldr	r3, [pc, #576]	; (8002d4c <UART_SetConfig+0x350>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	220c      	movs	r2, #12
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d020      	beq.n	8002b58 <UART_SetConfig+0x15c>
 8002b16:	d827      	bhi.n	8002b68 <UART_SetConfig+0x16c>
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d00d      	beq.n	8002b38 <UART_SetConfig+0x13c>
 8002b1c:	d824      	bhi.n	8002b68 <UART_SetConfig+0x16c>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <UART_SetConfig+0x12c>
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d010      	beq.n	8002b48 <UART_SetConfig+0x14c>
 8002b26:	e01f      	b.n	8002b68 <UART_SetConfig+0x16c>
 8002b28:	231b      	movs	r3, #27
 8002b2a:	2218      	movs	r2, #24
 8002b2c:	4694      	mov	ip, r2
 8002b2e:	44bc      	add	ip, r7
 8002b30:	4463      	add	r3, ip
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e06f      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002b38:	231b      	movs	r3, #27
 8002b3a:	2218      	movs	r2, #24
 8002b3c:	4694      	mov	ip, r2
 8002b3e:	44bc      	add	ip, r7
 8002b40:	4463      	add	r3, ip
 8002b42:	2202      	movs	r2, #2
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e067      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002b48:	231b      	movs	r3, #27
 8002b4a:	2218      	movs	r2, #24
 8002b4c:	4694      	mov	ip, r2
 8002b4e:	44bc      	add	ip, r7
 8002b50:	4463      	add	r3, ip
 8002b52:	2204      	movs	r2, #4
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e05f      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002b58:	231b      	movs	r3, #27
 8002b5a:	2218      	movs	r2, #24
 8002b5c:	4694      	mov	ip, r2
 8002b5e:	44bc      	add	ip, r7
 8002b60:	4463      	add	r3, ip
 8002b62:	2208      	movs	r2, #8
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e057      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002b68:	231b      	movs	r3, #27
 8002b6a:	2218      	movs	r2, #24
 8002b6c:	4694      	mov	ip, r2
 8002b6e:	44bc      	add	ip, r7
 8002b70:	4463      	add	r3, ip
 8002b72:	2210      	movs	r2, #16
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e04f      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a70      	ldr	r2, [pc, #448]	; (8002d40 <UART_SetConfig+0x344>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d143      	bne.n	8002c0a <UART_SetConfig+0x20e>
 8002b82:	4b72      	ldr	r3, [pc, #456]	; (8002d4c <UART_SetConfig+0x350>)
 8002b84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b86:	23c0      	movs	r3, #192	; 0xc0
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	22c0      	movs	r2, #192	; 0xc0
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d02a      	beq.n	8002bea <UART_SetConfig+0x1ee>
 8002b94:	22c0      	movs	r2, #192	; 0xc0
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d82e      	bhi.n	8002bfa <UART_SetConfig+0x1fe>
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d012      	beq.n	8002bca <UART_SetConfig+0x1ce>
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d826      	bhi.n	8002bfa <UART_SetConfig+0x1fe>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <UART_SetConfig+0x1be>
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	00d2      	lsls	r2, r2, #3
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d010      	beq.n	8002bda <UART_SetConfig+0x1de>
 8002bb8:	e01f      	b.n	8002bfa <UART_SetConfig+0x1fe>
 8002bba:	231b      	movs	r3, #27
 8002bbc:	2218      	movs	r2, #24
 8002bbe:	4694      	mov	ip, r2
 8002bc0:	44bc      	add	ip, r7
 8002bc2:	4463      	add	r3, ip
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e026      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002bca:	231b      	movs	r3, #27
 8002bcc:	2218      	movs	r2, #24
 8002bce:	4694      	mov	ip, r2
 8002bd0:	44bc      	add	ip, r7
 8002bd2:	4463      	add	r3, ip
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e01e      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002bda:	231b      	movs	r3, #27
 8002bdc:	2218      	movs	r2, #24
 8002bde:	4694      	mov	ip, r2
 8002be0:	44bc      	add	ip, r7
 8002be2:	4463      	add	r3, ip
 8002be4:	2204      	movs	r2, #4
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e016      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002bea:	231b      	movs	r3, #27
 8002bec:	2218      	movs	r2, #24
 8002bee:	4694      	mov	ip, r2
 8002bf0:	44bc      	add	ip, r7
 8002bf2:	4463      	add	r3, ip
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	e00e      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002bfa:	231b      	movs	r3, #27
 8002bfc:	2218      	movs	r2, #24
 8002bfe:	4694      	mov	ip, r2
 8002c00:	44bc      	add	ip, r7
 8002c02:	4463      	add	r3, ip
 8002c04:	2210      	movs	r2, #16
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e006      	b.n	8002c18 <UART_SetConfig+0x21c>
 8002c0a:	231b      	movs	r3, #27
 8002c0c:	2218      	movs	r2, #24
 8002c0e:	4694      	mov	ip, r2
 8002c10:	44bc      	add	ip, r7
 8002c12:	4463      	add	r3, ip
 8002c14:	2210      	movs	r2, #16
 8002c16:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <UART_SetConfig+0x344>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d000      	beq.n	8002c24 <UART_SetConfig+0x228>
 8002c22:	e09b      	b.n	8002d5c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c24:	231b      	movs	r3, #27
 8002c26:	2218      	movs	r2, #24
 8002c28:	4694      	mov	ip, r2
 8002c2a:	44bc      	add	ip, r7
 8002c2c:	4463      	add	r3, ip
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d01d      	beq.n	8002c70 <UART_SetConfig+0x274>
 8002c34:	dc20      	bgt.n	8002c78 <UART_SetConfig+0x27c>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d015      	beq.n	8002c66 <UART_SetConfig+0x26a>
 8002c3a:	dc1d      	bgt.n	8002c78 <UART_SetConfig+0x27c>
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <UART_SetConfig+0x24a>
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d005      	beq.n	8002c50 <UART_SetConfig+0x254>
 8002c44:	e018      	b.n	8002c78 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c46:	f7ff fcf5 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c4e:	e01d      	b.n	8002c8c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c50:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <UART_SetConfig+0x350>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2210      	movs	r2, #16
 8002c56:	4013      	ands	r3, r2
 8002c58:	d002      	beq.n	8002c60 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <UART_SetConfig+0x358>)
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c5e:	e015      	b.n	8002c8c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8002c60:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <UART_SetConfig+0x35c>)
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c64:	e012      	b.n	8002c8c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c66:	f7ff fc35 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c6e:	e00d      	b.n	8002c8c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c76:	e009      	b.n	8002c8c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c7c:	231a      	movs	r3, #26
 8002c7e:	2218      	movs	r2, #24
 8002c80:	4694      	mov	ip, r2
 8002c82:	44bc      	add	ip, r7
 8002c84:	4463      	add	r3, ip
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
        break;
 8002c8a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d100      	bne.n	8002c94 <UART_SetConfig+0x298>
 8002c92:	e139      	b.n	8002f08 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	0013      	movs	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	189b      	adds	r3, r3, r2
 8002c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d305      	bcc.n	8002cb0 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d907      	bls.n	8002cc0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002cb0:	231a      	movs	r3, #26
 8002cb2:	2218      	movs	r2, #24
 8002cb4:	4694      	mov	ip, r2
 8002cb6:	44bc      	add	ip, r7
 8002cb8:	4463      	add	r3, ip
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e123      	b.n	8002f08 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	6939      	ldr	r1, [r7, #16]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	000b      	movs	r3, r1
 8002cce:	0e1b      	lsrs	r3, r3, #24
 8002cd0:	0010      	movs	r0, r2
 8002cd2:	0205      	lsls	r5, r0, #8
 8002cd4:	431d      	orrs	r5, r3
 8002cd6:	000b      	movs	r3, r1
 8002cd8:	021c      	lsls	r4, r3, #8
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68b8      	ldr	r0, [r7, #8]
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	1900      	adds	r0, r0, r4
 8002cec:	4169      	adcs	r1, r5
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f7fd fa90 	bl	8000220 <__aeabi_uldivmod>
 8002d00:	0002      	movs	r2, r0
 8002d02:	000b      	movs	r3, r1
 8002d04:	0013      	movs	r3, r2
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d0a:	23c0      	movs	r3, #192	; 0xc0
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d309      	bcc.n	8002d26 <UART_SetConfig+0x32a>
 8002d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	035b      	lsls	r3, r3, #13
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d204      	bcs.n	8002d26 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	e0f0      	b.n	8002f08 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002d26:	231a      	movs	r3, #26
 8002d28:	2218      	movs	r2, #24
 8002d2a:	4694      	mov	ip, r2
 8002d2c:	44bc      	add	ip, r7
 8002d2e:	4463      	add	r3, ip
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e0e8      	b.n	8002f08 <UART_SetConfig+0x50c>
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	efff69f3 	.word	0xefff69f3
 8002d3c:	ffffcfff 	.word	0xffffcfff
 8002d40:	40004800 	.word	0x40004800
 8002d44:	fffff4ff 	.word	0xfffff4ff
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40004400 	.word	0x40004400
 8002d54:	003d0900 	.word	0x003d0900
 8002d58:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d000      	beq.n	8002d6a <UART_SetConfig+0x36e>
 8002d68:	e074      	b.n	8002e54 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002d6a:	231b      	movs	r3, #27
 8002d6c:	2218      	movs	r2, #24
 8002d6e:	4694      	mov	ip, r2
 8002d70:	44bc      	add	ip, r7
 8002d72:	4463      	add	r3, ip
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d822      	bhi.n	8002dc0 <UART_SetConfig+0x3c4>
 8002d7a:	009a      	lsls	r2, r3, #2
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <UART_SetConfig+0x52c>)
 8002d7e:	18d3      	adds	r3, r2, r3
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d84:	f7ff fc56 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d8c:	e022      	b.n	8002dd4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d8e:	f7ff fc67 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002d92:	0003      	movs	r3, r0
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d96:	e01d      	b.n	8002dd4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d98:	4b64      	ldr	r3, [pc, #400]	; (8002f2c <UART_SetConfig+0x530>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d002      	beq.n	8002da8 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002da2:	4b63      	ldr	r3, [pc, #396]	; (8002f30 <UART_SetConfig+0x534>)
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002da6:	e015      	b.n	8002dd4 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8002da8:	4b62      	ldr	r3, [pc, #392]	; (8002f34 <UART_SetConfig+0x538>)
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dac:	e012      	b.n	8002dd4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dae:	f7ff fb91 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002db2:	0003      	movs	r3, r0
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002db6:	e00d      	b.n	8002dd4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dbe:	e009      	b.n	8002dd4 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002dc4:	231a      	movs	r3, #26
 8002dc6:	2218      	movs	r2, #24
 8002dc8:	4694      	mov	ip, r2
 8002dca:	44bc      	add	ip, r7
 8002dcc:	4463      	add	r3, ip
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
        break;
 8002dd2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d100      	bne.n	8002ddc <UART_SetConfig+0x3e0>
 8002dda:	e095      	b.n	8002f08 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	005a      	lsls	r2, r3, #1
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	18d2      	adds	r2, r2, r3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0019      	movs	r1, r3
 8002dee:	0010      	movs	r0, r2
 8002df0:	f7fd f98a 	bl	8000108 <__udivsi3>
 8002df4:	0003      	movs	r3, r0
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d921      	bls.n	8002e44 <UART_SetConfig+0x448>
 8002e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	025b      	lsls	r3, r3, #9
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d21c      	bcs.n	8002e44 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	200e      	movs	r0, #14
 8002e10:	2418      	movs	r4, #24
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	181b      	adds	r3, r3, r0
 8002e16:	210f      	movs	r1, #15
 8002e18:	438a      	bics	r2, r1
 8002e1a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2207      	movs	r2, #7
 8002e24:	4013      	ands	r3, r2
 8002e26:	b299      	uxth	r1, r3
 8002e28:	193b      	adds	r3, r7, r4
 8002e2a:	181b      	adds	r3, r3, r0
 8002e2c:	193a      	adds	r2, r7, r4
 8002e2e:	1812      	adds	r2, r2, r0
 8002e30:	8812      	ldrh	r2, [r2, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	193a      	adds	r2, r7, r4
 8002e3c:	1812      	adds	r2, r2, r0
 8002e3e:	8812      	ldrh	r2, [r2, #0]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	e061      	b.n	8002f08 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e44:	231a      	movs	r3, #26
 8002e46:	2218      	movs	r2, #24
 8002e48:	4694      	mov	ip, r2
 8002e4a:	44bc      	add	ip, r7
 8002e4c:	4463      	add	r3, ip
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e059      	b.n	8002f08 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e54:	231b      	movs	r3, #27
 8002e56:	2218      	movs	r2, #24
 8002e58:	4694      	mov	ip, r2
 8002e5a:	44bc      	add	ip, r7
 8002e5c:	4463      	add	r3, ip
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d822      	bhi.n	8002eaa <UART_SetConfig+0x4ae>
 8002e64:	009a      	lsls	r2, r3, #2
 8002e66:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <UART_SetConfig+0x53c>)
 8002e68:	18d3      	adds	r3, r2, r3
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6e:	f7ff fbe1 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8002e72:	0003      	movs	r3, r0
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e76:	e022      	b.n	8002ebe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e78:	f7ff fbf2 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e80:	e01d      	b.n	8002ebe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <UART_SetConfig+0x530>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2210      	movs	r2, #16
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d002      	beq.n	8002e92 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <UART_SetConfig+0x534>)
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e90:	e015      	b.n	8002ebe <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <UART_SetConfig+0x538>)
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e96:	e012      	b.n	8002ebe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e98:	f7ff fb1c 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ea0:	e00d      	b.n	8002ebe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ea8:	e009      	b.n	8002ebe <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002eae:	231a      	movs	r3, #26
 8002eb0:	2218      	movs	r2, #24
 8002eb2:	4694      	mov	ip, r2
 8002eb4:	44bc      	add	ip, r7
 8002eb6:	4463      	add	r3, ip
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
        break;
 8002ebc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d021      	beq.n	8002f08 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	085a      	lsrs	r2, r3, #1
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	18d2      	adds	r2, r2, r3
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	0010      	movs	r0, r2
 8002ed6:	f7fd f917 	bl	8000108 <__udivsi3>
 8002eda:	0003      	movs	r3, r0
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	2b0f      	cmp	r3, #15
 8002ee4:	d909      	bls.n	8002efa <UART_SetConfig+0x4fe>
 8002ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	025b      	lsls	r3, r3, #9
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d204      	bcs.n	8002efa <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	e006      	b.n	8002f08 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002efa:	231a      	movs	r3, #26
 8002efc:	2218      	movs	r2, #24
 8002efe:	4694      	mov	ip, r2
 8002f00:	44bc      	add	ip, r7
 8002f02:	4463      	add	r3, ip
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	2200      	movs	r2, #0
 8002f12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f14:	231a      	movs	r3, #26
 8002f16:	2218      	movs	r2, #24
 8002f18:	4694      	mov	ip, r2
 8002f1a:	44bc      	add	ip, r7
 8002f1c:	4463      	add	r3, ip
 8002f1e:	781b      	ldrb	r3, [r3, #0]
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b00e      	add	sp, #56	; 0x38
 8002f26:	bdb0      	pop	{r4, r5, r7, pc}
 8002f28:	08003350 	.word	0x08003350
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	003d0900 	.word	0x003d0900
 8002f34:	00f42400 	.word	0x00f42400
 8002f38:	08003374 	.word	0x08003374

08002f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <UART_AdvFeatureConfig+0x144>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	0019      	movs	r1, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d00b      	beq.n	8002f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a43      	ldr	r2, [pc, #268]	; (8003084 <UART_AdvFeatureConfig+0x148>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d00b      	beq.n	8002faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a3b      	ldr	r2, [pc, #236]	; (8003088 <UART_AdvFeatureConfig+0x14c>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2208      	movs	r2, #8
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a34      	ldr	r2, [pc, #208]	; (800308c <UART_AdvFeatureConfig+0x150>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <UART_AdvFeatureConfig+0x154>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d00b      	beq.n	8003010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4a25      	ldr	r2, [pc, #148]	; (8003094 <UART_AdvFeatureConfig+0x158>)
 8003000:	4013      	ands	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	4013      	ands	r3, r2
 8003018:	d01d      	beq.n	8003056 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <UART_AdvFeatureConfig+0x15c>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	035b      	lsls	r3, r3, #13
 800303a:	429a      	cmp	r2, r3
 800303c:	d10b      	bne.n	8003056 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a15      	ldr	r2, [pc, #84]	; (800309c <UART_AdvFeatureConfig+0x160>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	4013      	ands	r3, r2
 800305e:	d00b      	beq.n	8003078 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <UART_AdvFeatureConfig+0x164>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
  }
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}
 8003080:	fffdffff 	.word	0xfffdffff
 8003084:	fffeffff 	.word	0xfffeffff
 8003088:	fffbffff 	.word	0xfffbffff
 800308c:	ffff7fff 	.word	0xffff7fff
 8003090:	ffffefff 	.word	0xffffefff
 8003094:	ffffdfff 	.word	0xffffdfff
 8003098:	ffefffff 	.word	0xffefffff
 800309c:	ff9fffff 	.word	0xff9fffff
 80030a0:	fff7ffff 	.word	0xfff7ffff

080030a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	2100      	movs	r1, #0
 80030b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030b4:	f7fd fd56 	bl	8000b64 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2208      	movs	r2, #8
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d10c      	bne.n	80030e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	0391      	lsls	r1, r2, #14
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <UART_CheckIdleState+0x8c>)
 80030d4:	9200      	str	r2, [sp, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f000 f82c 	bl	8003134 <UART_WaitOnFlagUntilTimeout>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d001      	beq.n	80030e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e021      	b.n	8003128 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d10c      	bne.n	800310c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	03d1      	lsls	r1, r2, #15
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <UART_CheckIdleState+0x8c>)
 80030fc:	9200      	str	r2, [sp, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	f000 f818 	bl	8003134 <UART_WaitOnFlagUntilTimeout>
 8003104:	1e03      	subs	r3, r0, #0
 8003106:	d001      	beq.n	800310c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e00d      	b.n	8003128 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2274      	movs	r2, #116	; 0x74
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b004      	add	sp, #16
 800312e:	bd80      	pop	{r7, pc}
 8003130:	01ffffff 	.word	0x01ffffff

08003134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b094      	sub	sp, #80	; 0x50
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003144:	e0a3      	b.n	800328e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003148:	3301      	adds	r3, #1
 800314a:	d100      	bne.n	800314e <UART_WaitOnFlagUntilTimeout+0x1a>
 800314c:	e09f      	b.n	800328e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7fd fd09 	bl	8000b64 <HAL_GetTick>
 8003152:	0002      	movs	r2, r0
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <UART_WaitOnFlagUntilTimeout+0x30>
 800315e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003160:	2b00      	cmp	r3, #0
 8003162:	d13d      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003164:	f3ef 8310 	mrs	r3, PRIMASK
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800316c:	647b      	str	r3, [r7, #68]	; 0x44
 800316e:	2301      	movs	r3, #1
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	f383 8810 	msr	PRIMASK, r3
}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	494c      	ldr	r1, [pc, #304]	; (80032b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003186:	400a      	ands	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	f383 8810 	msr	PRIMASK, r3
}
 8003194:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003196:	f3ef 8310 	mrs	r3, PRIMASK
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
 80031a0:	2301      	movs	r3, #1
 80031a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a6:	f383 8810 	msr	PRIMASK, r3
}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2101      	movs	r1, #1
 80031b8:	438a      	bics	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c2:	f383 8810 	msr	PRIMASK, r3
}
 80031c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2274      	movs	r2, #116	; 0x74
 80031d8:	2100      	movs	r1, #0
 80031da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e067      	b.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2204      	movs	r2, #4
 80031e8:	4013      	ands	r3, r2
 80031ea:	d050      	beq.n	800328e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	401a      	ands	r2, r3
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d146      	bne.n	800328e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320a:	f3ef 8310 	mrs	r3, PRIMASK
 800320e:	613b      	str	r3, [r7, #16]
  return(result);
 8003210:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003214:	2301      	movs	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f383 8810 	msr	PRIMASK, r3
}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4923      	ldr	r1, [pc, #140]	; (80032b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800322c:	400a      	ands	r2, r1
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003232:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f383 8810 	msr	PRIMASK, r3
}
 800323a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323c:	f3ef 8310 	mrs	r3, PRIMASK
 8003240:	61fb      	str	r3, [r7, #28]
  return(result);
 8003242:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003244:	64bb      	str	r3, [r7, #72]	; 0x48
 8003246:	2301      	movs	r3, #1
 8003248:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f383 8810 	msr	PRIMASK, r3
}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	438a      	bics	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	f383 8810 	msr	PRIMASK, r3
}
 800326c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	2120      	movs	r1, #32
 8003280:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2274      	movs	r2, #116	; 0x74
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e010      	b.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	425a      	negs	r2, r3
 800329e:	4153      	adcs	r3, r2
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	001a      	movs	r2, r3
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d100      	bne.n	80032ae <UART_WaitOnFlagUntilTimeout+0x17a>
 80032ac:	e74b      	b.n	8003146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b014      	add	sp, #80	; 0x50
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	fffffe5f 	.word	0xfffffe5f

080032bc <__libc_init_array>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2600      	movs	r6, #0
 80032c0:	4d0c      	ldr	r5, [pc, #48]	; (80032f4 <__libc_init_array+0x38>)
 80032c2:	4c0d      	ldr	r4, [pc, #52]	; (80032f8 <__libc_init_array+0x3c>)
 80032c4:	1b64      	subs	r4, r4, r5
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	42a6      	cmp	r6, r4
 80032ca:	d109      	bne.n	80032e0 <__libc_init_array+0x24>
 80032cc:	2600      	movs	r6, #0
 80032ce:	f000 f821 	bl	8003314 <_init>
 80032d2:	4d0a      	ldr	r5, [pc, #40]	; (80032fc <__libc_init_array+0x40>)
 80032d4:	4c0a      	ldr	r4, [pc, #40]	; (8003300 <__libc_init_array+0x44>)
 80032d6:	1b64      	subs	r4, r4, r5
 80032d8:	10a4      	asrs	r4, r4, #2
 80032da:	42a6      	cmp	r6, r4
 80032dc:	d105      	bne.n	80032ea <__libc_init_array+0x2e>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	00b3      	lsls	r3, r6, #2
 80032e2:	58eb      	ldr	r3, [r5, r3]
 80032e4:	4798      	blx	r3
 80032e6:	3601      	adds	r6, #1
 80032e8:	e7ee      	b.n	80032c8 <__libc_init_array+0xc>
 80032ea:	00b3      	lsls	r3, r6, #2
 80032ec:	58eb      	ldr	r3, [r5, r3]
 80032ee:	4798      	blx	r3
 80032f0:	3601      	adds	r6, #1
 80032f2:	e7f2      	b.n	80032da <__libc_init_array+0x1e>
 80032f4:	080033a0 	.word	0x080033a0
 80032f8:	080033a0 	.word	0x080033a0
 80032fc:	080033a0 	.word	0x080033a0
 8003300:	080033a4 	.word	0x080033a4

08003304 <memset>:
 8003304:	0003      	movs	r3, r0
 8003306:	1882      	adds	r2, r0, r2
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	7019      	strb	r1, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <_init>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr

08003320 <_fini>:
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003326:	bc08      	pop	{r3}
 8003328:	469e      	mov	lr, r3
 800332a:	4770      	bx	lr
